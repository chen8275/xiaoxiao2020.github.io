<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于 WebSocket 搭建多人聊天室</title>
    <url>/archives/bb2a3ec5.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇博文中我们了解什么是 websocket 以及我们为什么要使用 websocket？并且运用 SpringBoot 整合websocket 来实现了前后端信息互传，那今天我们就做一个多人聊天室来加深对 websocket 的了解。</p>
<p>在平常的生活中我们对群聊一点也不陌生，不管是扣扣还是微信，我们都可以随手拉一个群然后在里面火热畅聊，这个群聊便是使用 websocket 来实现的。</p>
<p>本文搭建了一个简易的多人聊天室，使用了 websocket 的基础特性。</p>
<p>源代码来源与老外的一篇好文：<a href="https://www.callicoder.com/spring-boot-websocket-chat-example/" target="_blank" rel="noopener">https://www.callicoder.com/spring-boot-websocket-chat-example/</a> </p>
<p>本文内容摘要</p>
<ul>
<li>理解WebSocket的前后端交互逻辑 </li>
<li>手把手使用 SpringBoot + WebSocket 搭建一个多人聊天室</li>
<li>代码源码及其解释 </li>
<li>前端展示页面 </li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g82i089kjig30hs0bd74w.gif" alt="fkxqrs7iio"></p>
<a id="more"></a>

<h2 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h2><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>我们新建一个 SpringBoot2 的项目工程，在默认依赖中，添加 websocket 依赖： </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="WebSocket-配置"><a href="#WebSocket-配置" class="headerlink" title="WebSocket 配置"></a>WebSocket 配置</h3><p>先来设置 websocket 的配置，新建 config 文件夹，在里面新建类 WebSocketConfig </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.websocketchatsample.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addEndpoint(<span class="string">"/ws"</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">"/app"</span>);</span><br><span class="line">        registry.enableSimpleBroker(<span class="string">"/topic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@EnableWebSocketMessageBroker</code> 用于启用我们的WebSocket服务器。 类 WebSocketConfig 实现了WebSocketMessageBrokerConfigure 接口并且实现了其中的方法。</p>
<p>第一个方法中我们注册了一个 websocket 端点，客户端将使用它连接到我们的 websocket 服务器。 </p>
<p>withSockJS() 是用来为不支持 websocket 的浏览器启用后备选项，使用了 SockJS。 </p>
<p>方法名中的 STOMP 是来自 Spring 框架 STOMP 实现。STOMP 代表简单文本导向的消息传递协议。它是一种消息传递协议，用于定义数据交换的格式和规则。为啥我们需要这个东西？因为 websocket 只是一种通信协议。它没有定义诸如以下内容：如何仅向订阅特定主题的用户发送消息，或者如何向特定用户发送消息。我们需要 STOMP 来实现这些功能。 </p>
<p>在 configureMessageBroker 方法中，我们配置一个消息代理，用于将消息从一个客户端路由到另一个客户端。</p>
<p>第一行定义了以 “/app” 开头的消息应该路由到消息处理方法（之后会定义这个方法）。</p>
<p>第二行定义了以 “/topic” 开头的消息应该路由到消息代理。</p>
<p>消息代理向订阅特定主题的所有连接客户端广播消息。</p>
<p>在上面的示例中，我们使用的是内存中的消息代理，之后也可以使用 RabbitMQ 或 ActiveMQ 等其他消息代理。</p>
<h3 id="创建-ChatMessage-实体"><a href="#创建-ChatMessage-实体" class="headerlink" title="创建 ChatMessage 实体"></a>创建 ChatMessage 实体</h3><p>ChatMessage 用来在客户端和服务端中交互。</p>
<p>我们新建 model 文件夹，创建实体类 ChatMessage 。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.websocketchatsample.model;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MessageType type;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String sender;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> MessageType &#123;</span><br><span class="line">        CHAT,</span><br><span class="line">        JOIN,</span><br><span class="line">        LEAVE</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实体中，有三个字段：</p>
<ul>
<li>type:消息类型</li>
<li>content：消息内容</li>
<li>sender：发送者</li>
</ul>
<p>类型有三种：</p>
<ul>
<li>CHAT: 消息</li>
<li>JOIN：加入</li>
<li>LEAVE：离开</li>
</ul>
<h3 id="创建-Controller-来接收和发送消息"><a href="#创建-Controller-来接收和发送消息" class="headerlink" title="创建 Controller 来接收和发送消息"></a>创建 Controller 来接收和发送消息</h3><p>创建 controller 文件夹，在 controller 文件夹添加类 ChatController 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.websocketchatsample.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tuhu.websocketchatsample.model.ChatMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Payload;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.SendTo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.SimpMessageHeaderAccessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/chat.sendMessage"</span>)</span><br><span class="line">    <span class="meta">@SendTo</span>(<span class="string">"/topic/public"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatMessage <span class="title">sendMessage</span><span class="params">(@Payload ChatMessage chatMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chatMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/chat.addUser"</span>)</span><br><span class="line">    <span class="meta">@SendTo</span>(<span class="string">"/topic/public"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatMessage <span class="title">addUser</span><span class="params">(@Payload ChatMessage chatMessage,</span></span></span><br><span class="line"><span class="function"><span class="params">                               SimpMessageHeaderAccessor headerAccessor)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Add username in web socket session</span></span><br><span class="line">        headerAccessor.getSessionAttributes().put(<span class="string">"username"</span>, chatMessage.getSender());</span><br><span class="line">        <span class="keyword">return</span> chatMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在 websocket 配置中，从目的地以 /app 开头的客户端发送的所有消息都将路由到这些使用@MessageMapping 注释的消息处理方法。 </p>
<p>例如，具有目标 /app/chat.sendMessage 的消息将路由到 sendMessage（）方法，并且具有目标 /app/chat.addUser 的消息将路由到addUser（）方法。</p>
<h3 id="添加WebSocket事件监听"><a href="#添加WebSocket事件监听" class="headerlink" title="添加WebSocket事件监听"></a>添加WebSocket事件监听</h3><p>完成了上述代码后，我们还需要对 socket 的连接和断连事件进行监听，这样我们才能广播用户进来和出去等操作。 </p>
<p>创建 listener 文件夹，新建 WebSocketEventListener 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.websocketchatsample.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tuhu.websocketchatsample.model.ChatMessage;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.SimpMessageSendingOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.stomp.StompHeaderAccessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.messaging.SessionConnectedEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.messaging.SessionDisconnectEvent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketEventListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpMessageSendingOperations messagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleWebSocketConnectListener</span><span class="params">(SessionConnectedEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Received a new web socket connection"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleWebSocketDisconnectListener</span><span class="params">(SessionDisconnectEvent event)</span> </span>&#123;</span><br><span class="line">        StompHeaderAccessor headerAccessor = StompHeaderAccessor.wrap(event.getMessage());</span><br><span class="line"></span><br><span class="line">        String username = (String) headerAccessor.getSessionAttributes().get(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">if</span>(username != <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"User Disconnected : "</span> + username);</span><br><span class="line"></span><br><span class="line">            ChatMessage chatMessage = <span class="keyword">new</span> ChatMessage();</span><br><span class="line">            chatMessage.setType(ChatMessage.MessageType.LEAVE);</span><br><span class="line">            chatMessage.setSender(username);</span><br><span class="line"></span><br><span class="line">            messagingTemplate.convertAndSend(<span class="string">"/topic/public"</span>, chatMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们已经在 ChatController 中定义的 addUser() 方法中广播了用户加入事件。因此我们不需要在SessionConnected 事件中执行任何操作。 </p>
<p>在 SessionDisconnect 事件中，编写代码用来从 websocket 会话中提取用户名，并向所有连接的客户端广播用户离开事件。 </p>
<h2 id="创建前端聊天室页面"><a href="#创建前端聊天室页面" class="headerlink" title="创建前端聊天室页面"></a>创建前端聊天室页面</h2><p>在 src/main/resources 文件下创建前端文件，结构类似这样： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static</span><br><span class="line">  └── css</span><br><span class="line">       └── main.css</span><br><span class="line">  └── js</span><br><span class="line">       └── main.js</span><br><span class="line">  └── index.html</span><br></pre></td></tr></table></figure>

<h3 id="HTML文件-index-html"><a href="#HTML文件-index-html" class="headerlink" title="HTML文件 index.html"></a>HTML文件 index.html</h3><p>HTML 文件包含用于显示聊天消息的用户界面。它包括 sockjs 和 stomp 两个 JS 库。</p>
<p>SockJS 是一个 WebSocket 客户端，它尝试使用本机 WebSockets，并为不支持 WebSocket 的旧浏览器提供支持。STOMP JS 是 JS 的 STOMP 客户端。</p>
<p>笔者在文件里使用了国内的<a href="https://cloud.tencent.com/product/cdn?from=10680" target="_blank" rel="noopener">CDN</a>源 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Boot WebSocket Chat Application<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/css/main.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sorry! Your browser doesn't support Javascript<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"username-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"username-page-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>Type your username<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"usernameForm"</span> <span class="attr">name</span>=<span class="string">"usernameForm"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"accent username-submit"</span>&gt;</span>Start Chatting<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"chat-page"</span> <span class="attr">class</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Spring WebSocket Chat Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"connecting"</span>&gt;</span></span><br><span class="line">            Connecting...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"messageArea"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"messageForm"</span> <span class="attr">name</span>=<span class="string">"messageForm"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group clearfix"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"Type a message..."</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/sockjs-client/1.1.4/sockjs.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/stomp.js/2.3.3/stomp.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript-main-js"><a href="#JavaScript-main-js" class="headerlink" title="JavaScript main.js"></a>JavaScript main.js</h3><p>添加连接到 websocket 端点以及发送和接收消息所需的 javascript。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> usernamePage = <span class="built_in">document</span>.querySelector(<span class="string">'#username-page'</span>);</span><br><span class="line"><span class="keyword">var</span> chatPage = <span class="built_in">document</span>.querySelector(<span class="string">'#chat-page'</span>);</span><br><span class="line"><span class="keyword">var</span> usernameForm = <span class="built_in">document</span>.querySelector(<span class="string">'#usernameForm'</span>);</span><br><span class="line"><span class="keyword">var</span> messageForm = <span class="built_in">document</span>.querySelector(<span class="string">'#messageForm'</span>);</span><br><span class="line"><span class="keyword">var</span> messageInput = <span class="built_in">document</span>.querySelector(<span class="string">'#message'</span>);</span><br><span class="line"><span class="keyword">var</span> messageArea = <span class="built_in">document</span>.querySelector(<span class="string">'#messageArea'</span>);</span><br><span class="line"><span class="keyword">var</span> connectingElement = <span class="built_in">document</span>.querySelector(<span class="string">'.connecting'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stompClient = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> username = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = [</span><br><span class="line">    <span class="string">'#2196F3'</span>, <span class="string">'#32c787'</span>, <span class="string">'#00BCD4'</span>, <span class="string">'#ff5652'</span>,</span><br><span class="line">    <span class="string">'#ffc107'</span>, <span class="string">'#ff85af'</span>, <span class="string">'#FF9800'</span>, <span class="string">'#39bbb0'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    username = <span class="built_in">document</span>.querySelector(<span class="string">'#name'</span>).value.trim();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(username) &#123;</span><br><span class="line">        usernamePage.classList.add(<span class="string">'hidden'</span>);</span><br><span class="line">        chatPage.classList.remove(<span class="string">'hidden'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> socket = <span class="keyword">new</span> SockJS(<span class="string">'/ws'</span>);</span><br><span class="line">        stompClient = Stomp.over(socket);</span><br><span class="line"></span><br><span class="line">        stompClient.connect(&#123;&#125;, onConnected, onError);</span><br><span class="line">    &#125;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onConnected</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Subscribe to the Public Topic</span></span><br><span class="line">    stompClient.subscribe(<span class="string">'/topic/public'</span>, onMessageReceived);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tell your username to the server</span></span><br><span class="line">    stompClient.send(<span class="string">"/app/chat.addUser"</span>,</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">sender</span>: username, <span class="attr">type</span>: <span class="string">'JOIN'</span>&#125;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    connectingElement.classList.add(<span class="string">'hidden'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onError</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    connectingElement.textContent = <span class="string">'Could not connect to WebSocket server. Please refresh this page to try again!'</span>;</span><br><span class="line">    connectingElement.style.color = <span class="string">'red'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> messageContent = messageInput.value.trim();</span><br><span class="line">    <span class="keyword">if</span>(messageContent &amp;&amp; stompClient) &#123;</span><br><span class="line">        <span class="keyword">var</span> chatMessage = &#123;</span><br><span class="line">            sender: username,</span><br><span class="line">            content: messageInput.value,</span><br><span class="line">            type: <span class="string">'CHAT'</span></span><br><span class="line">        &#125;;</span><br><span class="line">        stompClient.send(<span class="string">"/app/chat.sendMessage"</span>, &#123;&#125;, <span class="built_in">JSON</span>.stringify(chatMessage));</span><br><span class="line">        messageInput.value = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onMessageReceived</span>(<span class="params">payload</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(payload.body);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> messageElement = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(message.type === <span class="string">'JOIN'</span>) &#123;</span><br><span class="line">        messageElement.classList.add(<span class="string">'event-message'</span>);</span><br><span class="line">        message.content = message.sender + <span class="string">' joined!'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.type === <span class="string">'LEAVE'</span>) &#123;</span><br><span class="line">        messageElement.classList.add(<span class="string">'event-message'</span>);</span><br><span class="line">        message.content = message.sender + <span class="string">' left!'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        messageElement.classList.add(<span class="string">'chat-message'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> avatarElement = <span class="built_in">document</span>.createElement(<span class="string">'i'</span>);</span><br><span class="line">        <span class="keyword">var</span> avatarText = <span class="built_in">document</span>.createTextNode(message.sender[<span class="number">0</span>]);</span><br><span class="line">        avatarElement.appendChild(avatarText);</span><br><span class="line">        avatarElement.style[<span class="string">'background-color'</span>] = getAvatarColor(message.sender);</span><br><span class="line"></span><br><span class="line">        messageElement.appendChild(avatarElement);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> usernameElement = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">        <span class="keyword">var</span> usernameText = <span class="built_in">document</span>.createTextNode(message.sender);</span><br><span class="line">        usernameElement.appendChild(usernameText);</span><br><span class="line">        messageElement.appendChild(usernameElement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> textElement = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">    <span class="keyword">var</span> messageText = <span class="built_in">document</span>.createTextNode(message.content);</span><br><span class="line">    textElement.appendChild(messageText);</span><br><span class="line"></span><br><span class="line">    messageElement.appendChild(textElement);</span><br><span class="line"></span><br><span class="line">    messageArea.appendChild(messageElement);</span><br><span class="line">    messageArea.scrollTop = messageArea.scrollHeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAvatarColor</span>(<span class="params">messageSender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; messageSender.length; i++) &#123;</span><br><span class="line">        hash = <span class="number">31</span> * hash + messageSender.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="built_in">Math</span>.abs(hash % colors.length);</span><br><span class="line">    <span class="keyword">return</span> colors[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usernameForm.addEventListener(<span class="string">'submit'</span>, connect, <span class="literal">true</span>)</span><br><span class="line">messageForm.addEventListener(<span class="string">'submit'</span>, sendMessage, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<p>connect() 函数使用 SockJS 和 stomp 客户端连接到我们在 Spring Boot 中配置的 /ws 端点。 </p>
<p>成功连接后，客户端订阅 /topic/public，并通过向 /app/chat.addUser 目的地发送消息将该用户的名称告知服务器。 </p>
<p>stompClient.subscribe() 函数采用一种回调方法，只要消息到达订阅主题，就会调用该方法。 </p>
<p>其它的代码用于在屏幕上显示和格式化消息。 </p>
<h3 id="CSS-main-css"><a href="#CSS-main-css" class="headerlink" title="CSS main.css"></a>CSS main.css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.58</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#128ff2</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-control</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c8c8c8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.7em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#128ff2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.6rem</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">38px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.default</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e8e8e8</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.12);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.primary</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#128ff2</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.12);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.accent</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff4743</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0, 0, 0, 0.12);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#username-page</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.username-page-container</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">11px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.27);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">35px</span> <span class="number">55px</span> <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">160px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.username-page-container</span> <span class="selector-class">.username-submit</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#chat-page</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chat-container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">11px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.27);</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">calc</span>(100% - 60px);</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#chat-page</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FFF</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">calc</span>(100% - 150px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#chat-page</span> <span class="selector-id">#messageForm</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#chat-page</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#f4f4f4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#chat-page</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#chat-page</span> <span class="selector-class">.event-message</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#chat-page</span> <span class="selector-class">.event-message</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#chat-page</span> <span class="selector-class">.chat-message</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">68px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#chat-page</span> <span class="selector-class">.chat-message</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#chat-page</span> <span class="selector-class">.chat-message</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#chat-page</span> <span class="selector-class">.chat-message</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#43464b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#messageForm</span> <span class="selector-class">.input-group</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 85px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#messageForm</span> <span class="selector-class">.input-group</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chat-header</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ececec</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chat-header</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.connecting</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">65px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">730px</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.chat-container</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">480px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.chat-container</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="built_in">calc</span>(100% - 30px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.username-page-container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: auto;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-id">#chat-page</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="built_in">calc</span>(100% - 120px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-id">#messageForm</span> <span class="selector-class">.input-group</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">65px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-id">#messageForm</span> <span class="selector-class">.input-group</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 70px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.chat-header</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.connecting</span> &#123;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.chat-header</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.1em</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整个项目结构如下： </p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g82i0xaaelj30bc0h3mxp.jpg" alt="1571388349818"></p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动SpringBoot项目 效果如下：</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g82i14vkmhj31fb0nedg6.jpg" alt="1571389154218"></p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g82i1de3r7j31f50nraak.jpg" alt="1571389284869"></p>
<h2 id="补充：使用RabbitMQ代替内存作为消息代理"><a href="#补充：使用RabbitMQ代替内存作为消息代理" class="headerlink" title="补充：使用RabbitMQ代替内存作为消息代理"></a>补充：使用RabbitMQ代替内存作为消息代理</h2><p>添加依赖： </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- RabbitMQ Starter Dependency --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Following additional dependency is required <span class="keyword">for</span> Full Featured STOMP Broker Relay --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-reactor-netty&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>然后将 WebSocketConfig 类中 configureMessageBroker 方法改为使用 RabbitMq，完成！ </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.setApplicationDestinationPrefixes(<span class="string">"/app"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for enabling a Full featured broker like RabbitMQ</span></span><br><span class="line">    registry.enableStompBrokerRelay(<span class="string">"/topic"</span>)</span><br><span class="line">            .setRelayHost(<span class="string">"localhost"</span>)</span><br><span class="line">            .setRelayPort(<span class="number">61613</span>)</span><br><span class="line">            .setClientLogin(<span class="string">"guest"</span>)</span><br><span class="line">            .setClientPasscode(<span class="string">"guest"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此一来，便可以通过 RabbitMq 进行消息的订阅。 </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们在本文中搭建了一个简易的多人聊天室，使用了 WebSocket 的特性。 </p>
<p>本文工程源代码： </p>
<p><a href="https://github.com/xiaoxiao2020/redis-sample/tree/master/websocket-chat-sample" target="_blank" rel="noopener">https://github.com/xiaoxiao2020/redis-sample/tree/master/websocket-chat-sample</a></p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>rabbitmq</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 集成 WebSocket 实现前后端消息互传</title>
    <url>/archives/1ec52e61.html</url>
    <content><![CDATA[<h2 id="什么是WebSocket"><a href="#什么是WebSocket" class="headerlink" title="什么是WebSocket?"></a>什么是WebSocket?</h2><p>WebSocket 协议是基于 TCP 的一种新的网络协议。它实现了浏览器与服务器全双工 (full-duplex) 通信—允许服务器主动发送信息给客户端。 </p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g819u0lntxj30dw09mmxp.jpg" alt="socket1"></p>
<a id="more"></a>

<h2 id="为什么需要WebSocket"><a href="#为什么需要WebSocket" class="headerlink" title="为什么需要WebSocket?"></a>为什么需要WebSocket?</h2><p>大家都知道以前客户端想知道服务端的处理进度，要不停地使用 Ajax 进行轮询，让浏览器隔个几秒就向服务器发一次请求，这对服务器压力较大。另外一种轮询就是采用 long poll 的方式，这就跟打电话差不多，没收到消息就一直不挂电话，也就是说，客户端发起连接后，如果没消息，就一直不返回 response 给客户端，连接阶段一直是阻塞的。</p>
<p>而 WebSocket 解决了 HTTP 的这几个难题。当服务器完成协议升级后（ HTTP -&gt; WebSocket ），服务端可以主动推送信息给客户端，解决了轮询造成的同步延迟问题。由于 WebSocket 只需要一次 HTTP 握手，服务端就能一直与客户端保持通信，直到关闭连接，这样就解决了服务器需要反复解析 HTTP 协议，减少了资源的开销。</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g81ay92bdgj30hg0e73z1.jpg" alt="websocket2"> </p>
<p>现在通过 SpringBoot 集成 WebSocket 来实现前后端通信。</p>
<h2 id="集成-WebSocket-实现前后端通信"><a href="#集成-WebSocket-实现前后端通信" class="headerlink" title="集成 WebSocket 实现前后端通信"></a>集成 WebSocket 实现前后端通信</h2><p>项目代码结构图</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g819uydkl2j30bl0acglu.jpg" alt="1571299972789"></p>
<h3 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h3><p>SpringBoot2.0 对 WebSocket 的支持简直太棒了，直接就有包可以引入 。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="配置-WebSocketConfig"><a href="#配置-WebSocketConfig" class="headerlink" title="配置 WebSocketConfig"></a>配置 WebSocketConfig</h3><p>启用WebSocket的支持也是很简单，将ServerEndpointExporter对象注入到容器中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.websocketsample.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="WebSocket-服务端-WebSocketServer"><a href="#WebSocket-服务端-WebSocketServer" class="headerlink" title="WebSocket 服务端 WebSocketServer"></a>WebSocket 服务端 WebSocketServer</h3><p>因为 WebSocket 是类似客户端服务端的形式(采用ws协议)，那么这里的 WebSocketServer 其实就相当于一个 ws协议的 Controller。直接 <code>@ServerEndpoint(&quot;/websocket&quot;)</code>  、<code>@Component</code> 启用即可，然后在里面实现<code>@OnOpen</code> , <code>@onClose</code> ,<code>@onMessage</code>等方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.websocketsample.controller;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/websocket/&#123;sid&#125;"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> onlineCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收sid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sid=<span class="string">""</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session,@PathParam(<span class="string">"sid"</span>)</span> String sid) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        <span class="comment">//加入set中</span></span><br><span class="line">        webSocketSet.add(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//在线数加1</span></span><br><span class="line">        addOnlineCount();</span><br><span class="line">        log.info(<span class="string">"有新窗口开始监听:"</span>+sid+<span class="string">",当前在线人数为"</span> + getOnlineCount());</span><br><span class="line">        <span class="keyword">this</span>.sid=sid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendMessage(<span class="string">"连接成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"websocket IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从set中删除</span></span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//在线数减1</span></span><br><span class="line">        subOnlineCount();</span><br><span class="line">        log.info(<span class="string">"有一连接关闭！当前在线人数为"</span> + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"收到来自窗口"</span>+sid+<span class="string">"的信息:"</span>+message);</span><br><span class="line">        <span class="comment">//群发消息</span></span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                item.sendMessage(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"发生错误"</span>);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现服务器主动推送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发自定义消息</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String message,@PathParam(<span class="string">"sid"</span>)</span> String sid) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"推送消息到窗口"</span>+sid+<span class="string">"，推送内容:"</span>+message);</span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//这里可以设定只推送给这个sid的，为null则全部推送</span></span><br><span class="line">                <span class="keyword">if</span>(sid==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.sendMessage(message);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.sid.equals(sid))&#123;</span><br><span class="line">                    item.sendMessage(message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketServer.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketServer.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消息推送"><a href="#消息推送" class="headerlink" title="消息推送"></a>消息推送</h3><p>至于推送新信息，可以再自己的 Controller 写个方法调用 WebSocketServer.sendInfo() 即可 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">至于推送新信息，可以再自己的Controller写个方法调用WebSocketServer.sendInfo();即可</span><br></pre></td></tr></table></figure>

<h3 id="页面发起socket请求"><a href="#页面发起socket请求" class="headerlink" title="页面发起socket请求"></a>页面发起socket请求</h3><p>然后在页面用js代码调用 socket，当然，太古老的浏览器是不行的，一般新的浏览器或者谷歌浏览器是没问题的。还有一点，记得协议是ws的哦。直接在浏览器控制台开启连接。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> socket;  </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(WebSocket) == <span class="string">"undefined"</span>) &#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"您的浏览器不支持WebSocket"</span>);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"您的浏览器支持WebSocket"</span>);  </span><br><span class="line">        	<span class="comment">//实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接</span></span><br><span class="line">            socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080/websocket/20"</span>);  </span><br><span class="line">            <span class="comment">//打开事件</span></span><br><span class="line">            socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"Socket 已打开"</span>);  </span><br><span class="line">                <span class="comment">//socket.send("这是来自客户端的消息" + location.href + new Date());</span></span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="comment">//获得消息事件</span></span><br><span class="line">            socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;  </span><br><span class="line">                <span class="built_in">console</span>.log(msg.data);  </span><br><span class="line">                <span class="comment">//发现消息进入    开始处理前端触发逻辑</span></span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="comment">//关闭事件</span></span><br><span class="line">            socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"Socket已关闭"</span>);  </span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="comment">//发生了错误事件</span></span><br><span class="line">            socket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">                alert(<span class="string">"Socket发生了错误"</span>);  </span><br><span class="line">                <span class="comment">//此时可以尝试刷新页面</span></span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//离开页面时，关闭socket</span></span><br><span class="line">            <span class="comment">//jquery1.8中已经被废弃，3.0中已经移除</span></span><br><span class="line">            <span class="comment">// $(window).unload(function()&#123;</span></span><br><span class="line">            <span class="comment">//     socket.close();</span></span><br><span class="line">            <span class="comment">//&#125;);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>现在可以在浏览器开启连接，通过客户端调用接口服务端就可以向浏览器发送消息。</p>
<p>现在打开两个页面开启两个连接：</p>
<ul>
<li>socket = new WebSocket(“ws://localhost:8080/websocket/20”) ；</li>
<li>socket = new WebSocket(“ws://localhost:8080/websocket/22”) ;  </li>
</ul>
<p>向前端推送数据：</p>
<ul>
<li><a href="http://localhost:8080/checkcenter/socket/push/20?message=Hello" target="_blank" rel="noopener">http://localhost:8080/checkcenter/socket/push/20?message=Hello</a></li>
<li><a href="http://localhost:8080/checkcenter/socket/push/22?message=HelloWorld" target="_blank" rel="noopener">http://localhost:8080/checkcenter/socket/push/22?message=HelloWorld</a></li>
</ul>
<p>可以看到服务端已经将消息推送给了客户端</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g819v72ymuj31e80bemz8.jpg" alt="1571299478746"></p>
<p>而客户端也收到了消息</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g819vibc3jj30qe0i2abg.jpg" alt="1571299579094"></p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g819vqz6kfj30qd0hpwfu.jpg" alt="1571299595294"></p>
<p>先打开页面，指定cid，启用socket接收，然后再另一个页面调用刚才 Controller 封装的推送信息的方法到这个cid的socket，即可向前端推送消息。 </p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>serverEndpointExporter 错误</p>
<blockquote>
<p>org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘serverEndpointExporter’ defined in class path resource [com/xxx/WebSocketConfig.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: <code>javax.websocket.server.ServerContainer not available</code></p>
</blockquote>
<p>如果 tomcat 部署一直报这个错，请移除 WebSocketConfig 中 @Bean ServerEndpointExporter 的注入 。</p>
<p>ServerEndpointExporter 是由 Spring 官方提供的标准实现，用于扫描 ServerEndpointConfig 配置类和@ServerEndpoint 注解实例。使用规则也很简单：</p>
<p>1、如果使用默认的嵌入式容器 比如Tomcat 则必须手工在上下文提供ServerEndpointExporter。<br>2、如果使用外部容器部署war包，则不需要提供提供ServerEndpointExporter，因为此时SpringBoot默认将扫描   服务端的行为交给外部容器处理，所以线上部署的时候要把WebSocketConfig中这段注入bean的代码注掉。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 集成 redis 实现分布式 session 共享</title>
    <url>/archives/5589af0.html</url>
    <content><![CDATA[<p>session 是服务器用来保存用户操作的一系列会话信息，由 Web 容器进行管理。单机情况下，不存在 session 共享的情况，分布式情况下，如果不进行 session 共享会出现请求落到不同机器要重复登录的情况 。单点登录可以用 cookie+redis 的方式，第一次登陆生成 token，将 token 和用户以键值对的方式存入 redis。并将 token 写入cookie 返回到浏览器。以后每次请求 cookie 都会携带上 token。服务端获取 token 然后去 redis 中查找是否存在此用户从而实现单点登录。</p>
<a id="more"></a>
<p>项目代码结构图结构</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g7yw6dmuy1j30dx0but90.jpg" alt="1571122427195"></p>
<p>准备工作</p>
<p>启动 eureka 注册中心 eureka-register，然后新建两个 springboot 服务分别是 four-sample 和 five-sample。</p>
<p>以 four-sample 演示操作</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">   &lt;!--spring boot 与redis应用基本环境配置 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!--spring session 与redis应用基本环境配置,需要开启redis后才可以使用，不然启动Spring boot会			报错 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h3><p>在 <code>application.yml</code> 资源文件中添加 redis 和 eureka 相关配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8086</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-cloud-producer1</span><br><span class="line">  redis:</span><br><span class="line">      host: <span class="number">127.0</span>.0.1</span><br><span class="line">      port: <span class="number">6379</span></span><br><span class="line">      timeout: <span class="number">5000</span>ms</span><br><span class="line">      password:</span><br><span class="line">      database: <span class="number">0</span></span><br><span class="line">      jedis:</span><br><span class="line">        pool:</span><br><span class="line">          max-active: <span class="number">50</span></span><br><span class="line">          max-wait: <span class="number">3000</span>ms</span><br><span class="line">          max-idle: <span class="number">20</span></span><br><span class="line">          min-idle: <span class="number">2</span></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>

<h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.foursample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-08-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourSampleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FourSampleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value=<span class="string">"/setSession"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setSession</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap(<span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"超级管理员"</span>);</span><br><span class="line">        map.put(<span class="string">"account"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        request.getSession().setAttribute(<span class="string">"userSession"</span>,map);</span><br><span class="line">        String sessionId = request.getSession().getId();</span><br><span class="line">        <span class="keyword">return</span> sessionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>@EnableRedisHttpSession</code> 来开启spring session支持，使用<code>@EnableEurekaClient</code> 将服务注册到注册中兴。five-sample 服务的配置如法炮制，只需修改端口号和程序名即可。</p>
<p>five-sample 服务配置完以后，我们需要在主程序拿到 <code>userSession</code>，看看 session 是否与服务 four-sample 里的一致。five-sample 主程序代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.fivesample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-08-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FiveSampleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FiveSampleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value=<span class="string">"/getSession"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getSession</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String sessionId = request.getSession().getId();</span><br><span class="line">        Object obj = request.getSession().getAttribute(<span class="string">"userSession"</span>);</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap(<span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">"sessionId"</span>,sessionId);</span><br><span class="line">        map.put(<span class="string">"user"</span>,obj);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>现在我们启动注册中心 eureka-register 和两个服务 four-sample 和 five-sample</p>
<p>用 postman 请求 four-sample，我们可以看到</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g7yw6q1rmnj316p0lswg4.jpg" alt="1571121861255"></p>
<p>再用postman请求five-sample，我们可以看到</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g7yw71xby6j316o0k4abk.jpg" alt="1571121906947"></p>
<p>ok 这样我们就实现了 session 共享，可以看到 SpringBoot 集成 redis 实现 session 共享是如此的简单，仅仅需要一个依赖就可以解决。我们写了一些代码，也做了一些配置，但是全都和 Spring Session 无关，配置是配置 Redis，代码就是普通的 HttpSession，和 Spring Session 没有任何关系！唯一和 Spring Session 相关的，可能就是我在一开始引入了 Spring Session 的依赖吧！</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 集成 Redisson 实现分布式锁</title>
    <url>/archives/b653c1e7.html</url>
    <content><![CDATA[<p>上篇 《SpringBoot 集成 redis 分布式锁优化》对死锁的问题进行了优化，今天介绍的是 redis 官方推荐使用的 Redisson ，Redisson 架设在 redis 基础上的 Java 驻内存数据网格（In-Memory Data Grid），基于NIO的 Netty 框架上，利用了 redis 键值数据库。功能非常强大，解决了很多分布式架构中的问题。</p>
<p>Github的wiki地址：<a href="https://github.com/redisson/redisson/wiki" target="_blank" rel="noopener">https://github.com/redisson/redisson/wiki</a> </p>
<p>官方文档：<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95" target="_blank" rel="noopener">https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95</a> </p>
<a id="more"></a>

<p>项目代码结构图：</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g7ve4i4wjaj30fn0j20th.jpg" alt="1570859202582"></p>
<h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h3><p>在 <code>application.properites</code> 资源文件中添加单机&amp;哨兵相关配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">3000</span></span><br><span class="line"></span><br><span class="line"># redisson lock 单机模式</span><br><span class="line">redisson.address=redis:<span class="comment">//127.0.0.1:6379</span></span><br><span class="line">redisson.password=</span><br><span class="line"></span><br><span class="line">#哨兵模式</span><br><span class="line">#redisson.master-name= master</span><br><span class="line">#redisson.password=</span><br><span class="line">#redisson.sentinel-addresses=10.47.91.83:26379,10.47.91.83:26380,10.47.91.83:26381</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>这里如果不加 redis:// 前缀会报 URI 构建错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: java.net.URISyntaxException: Illegal character in scheme name at index 0</span><br></pre></td></tr></table></figure>

<p>更多的配置信息可以去官网查看</p>
<h3 id="定义Lock的接口定义类"><a href="#定义Lock的接口定义类" class="headerlink" title="定义Lock的接口定义类"></a>定义Lock的接口定义类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.thirdsample.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/12 10:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DistributedLocker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">RLock <span class="title">lock</span><span class="params">(String lockKey)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">RLock <span class="title">lock</span><span class="params">(String lockKey, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">RLock <span class="title">lock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">int</span> waitTime, <span class="keyword">int</span> leaseTime)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String lockKey)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(RLock lock)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lock接口实现类"><a href="#Lock接口实现类" class="headerlink" title="Lock接口实现类"></a>Lock接口实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.thirdsample.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/12 10:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonDistributedLocker</span> <span class="keyword">implements</span> <span class="title">DistributedLocker</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(String lockKey)</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(String lockKey, <span class="keyword">int</span> leaseTime)</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">        lock.lock(leaseTime, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(String lockKey, TimeUnit unit ,<span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">        lock.lock(timeout, unit);</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">int</span> waitTime, <span class="keyword">int</span> leaseTime)</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> lock.tryLock(waitTime, leaseTime, unit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String lockKey)</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(RLock lock)</span> </span>&#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedissonClient</span><span class="params">(RedissonClient redissonClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redissonClient = redissonClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="redisson属性装配类"><a href="#redisson属性装配类" class="headerlink" title="redisson属性装配类"></a>redisson属性装配类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.tuhu.thirdsample.common;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author chendesheng</span><br><span class="line"> * @create 2019/10/11 20:04</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@ConfigurationProperties(prefix = &quot;redisson&quot;)</span><br><span class="line">@ConditionalOnProperty(&quot;redisson.password&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class RedissonProperties &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private int timeout = 3000;</span><br><span class="line"></span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    private int database = 0;</span><br><span class="line"></span><br><span class="line">    private int connectionPoolSize = 64;</span><br><span class="line"></span><br><span class="line">    private int connectionMinimumIdleSize=10;</span><br><span class="line"></span><br><span class="line">    private int slaveConnectionPoolSize = 250;</span><br><span class="line"></span><br><span class="line">    private int masterConnectionPoolSize = 250;</span><br><span class="line"></span><br><span class="line">    private String[] sentinelAddresses;</span><br><span class="line"></span><br><span class="line">    private String masterName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SpringBoot自动装配类"><a href="#SpringBoot自动装配类" class="headerlink" title="SpringBoot自动装配类"></a>SpringBoot自动装配类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.thirdsample.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tuhu.thirdsample.common.RedissonProperties;</span><br><span class="line"><span class="keyword">import</span> com.tuhu.thirdsample.service.DistributedLocker;</span><br><span class="line"><span class="keyword">import</span> com.tuhu.thirdsample.service.RedissonDistributedLocker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tuhu.thirdsample.util.RedissonLockUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.SentinelServersConfig;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.SingleServerConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/12 10:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(Config.class)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(RedissonProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonProperties redissonProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哨兵模式自动装配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(name=<span class="string">"redisson.master-name"</span>)</span><br><span class="line">    <span class="function">RedissonClient <span class="title">redissonSentinel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        SentinelServersConfig serverConfig = config.useSentinelServers().addSentinelAddress(redissonProperties.getSentinelAddresses())</span><br><span class="line">                .setMasterName(redissonProperties.getMasterName())</span><br><span class="line">                .setTimeout(redissonProperties.getTimeout())</span><br><span class="line">                .setMasterConnectionPoolSize(redissonProperties.getMasterConnectionPoolSize())</span><br><span class="line">                .setSlaveConnectionPoolSize(redissonProperties.getSlaveConnectionPoolSize());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(redissonProperties.getPassword())) &#123;</span><br><span class="line">            serverConfig.setPassword(redissonProperties.getPassword());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单机模式自动装配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(name=<span class="string">"redisson.address"</span>)</span><br><span class="line">    <span class="function">RedissonClient <span class="title">redissonSingle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        SingleServerConfig serverConfig = config.useSingleServer()</span><br><span class="line">                .setAddress(redissonProperties.getAddress())</span><br><span class="line">                .setTimeout(redissonProperties.getTimeout())</span><br><span class="line">                .setConnectionPoolSize(redissonProperties.getConnectionPoolSize())</span><br><span class="line">                .setConnectionMinimumIdleSize(redissonProperties.getConnectionMinimumIdleSize());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(redissonProperties.getPassword())) &#123;</span><br><span class="line">            serverConfig.setPassword(redissonProperties.getPassword());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装配locker类，并将实例注入到RedissLockUtil中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DistributedLocker <span class="title">distributedLocker</span><span class="params">(RedissonClient redissonClient)</span> </span>&#123;</span><br><span class="line">        DistributedLocker locker = <span class="keyword">new</span> RedissonDistributedLocker();</span><br><span class="line">        ((RedissonDistributedLocker) locker).setRedissonClient(redissonClient);</span><br><span class="line">        RedissonLockUtil.setLocker(locker);</span><br><span class="line">        <span class="keyword">return</span> locker;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lock帮助类"><a href="#Lock帮助类" class="headerlink" title="Lock帮助类"></a>Lock帮助类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.thirdsample.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tuhu.thirdsample.service.DistributedLocker;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/12 10:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonLockUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DistributedLocker redissLock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setLocker</span><span class="params">(DistributedLocker locker)</span> </span>&#123;</span><br><span class="line">        redissLock = locker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RLock <span class="title">lock</span><span class="params">(String lockKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redissLock.lock(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String lockKey)</span> </span>&#123;</span><br><span class="line">        redissLock.unlock(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(RLock lock)</span> </span>&#123;</span><br><span class="line">        redissLock.unlock(lock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带超时的锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间   单位：秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RLock <span class="title">lock</span><span class="params">(String lockKey, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redissLock.lock(lockKey, timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带超时的锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RLock <span class="title">lock</span><span class="params">(String lockKey, TimeUnit unit , <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redissLock.lock(lockKey, unit, timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitTime 最多等待时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leaseTime 上锁后自动释放锁时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String lockKey, <span class="keyword">int</span> waitTime, <span class="keyword">int</span> leaseTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redissLock.tryLock(lockKey, TimeUnit.SECONDS, waitTime, leaseTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitTime 最多等待时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leaseTime 上锁后自动释放锁时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">int</span> waitTime, <span class="keyword">int</span> leaseTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redissLock.tryLock(lockKey, unit, waitTime, leaseTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.thirdsample.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tuhu.thirdsample.common.KeyConst;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/12 11:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/lock"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedissonClient redissonClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/task"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"task start"</span>);</span><br><span class="line">        RLock lock = redissonClient.getLock(KeyConst.REDIS_LOCK_KEY);</span><br><span class="line">        <span class="keyword">boolean</span> getLock = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (getLock = lock.tryLock(<span class="number">0</span>,<span class="number">5</span>,TimeUnit.SECONDS))&#123;</span><br><span class="line">                <span class="comment">//执行业务逻辑</span></span><br><span class="line">                System.out.println(<span class="string">"拿到锁干活"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">"Redisson分布式锁没有获得锁:&#123;&#125;,ThreadName:&#123;&#125;"</span>,KeyConst.REDIS_LOCK_KEY,Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Redisson 获取分布式锁异常,异常信息:&#123;&#125;"</span>,e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!getLock)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果演示的话需要注释该代码;实际应该放开</span></span><br><span class="line">            <span class="comment">//lock.unlock();</span></span><br><span class="line">            <span class="comment">//log.info("Redisson分布式锁释放锁:&#123;&#125;,ThreadName :&#123;&#125;", KeyConst.REDIS_LOCK_KEY, Thread.currentThread().getName());</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>RLock</code>继承自<code>java.util.concurrent.locks.Lock</code>，可以将其理解为一个重入锁，需要手动加锁和释放锁 。</p>
<p>来看它其中的一个方法：<code>tryLock(long waitTime, long leaseTime, TimeUnit unit)</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getLock = lock.tryLock(0,5,TimeUnit.SECONDS)</span><br></pre></td></tr></table></figure>

<p>通过<code>tryLock()</code>的参数可以看出，在获取该锁时如果被其他线程先拿到锁就会进入等待，等待<code>waitTime</code>时间，如果还没用机会获取到锁就放弃，返回false；若获得了锁，除非是调用<code>unlock</code>释放，那么会一直持有锁，直到超过<code>leaseTime</code>指定的时间。 </p>
<p>以上就是Redisson实现分布式锁的核心方法，有人可能要问，那怎么确定拿的是同一把锁，分布式锁在哪？</p>
<p>这就是 Redisson 的强大之处，其底层还是使用的 Redis 来作分布式锁，在我们的<code>RedissonManager</code>中已经指定了 Redis 实例，Redisson 会进行托管，其原理与我们手动实现 Redis 分布式锁类似。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动项目，在postman中输入url：<a href="http://localhost:3000/lock/task" target="_blank" rel="noopener">http://localhost:3000/lock/task</a> </p>
<p>第一次输入结果，我们可以在控制台看到：</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g7ve4xgm1xj31e60e0wgg.jpg" alt="1570860183525"></p>
<p>在锁过期时间内再次请求，我们可以在控制台看到：</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g7ve57xda2j31e60dq40q.jpg" alt="1570860271026"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>ok ，SpringBoot 集成 Redisson实现分布式锁已经写到最后。使用redisson更加体现一切皆对象，我们不需要知道内部如何实现，只需知道如何使用就行。 当然仅仅是知道如何使用是远远不够的，熟悉理解底层原理更为重要！</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 集成 redis 分布式锁优化</title>
    <url>/archives/3672fc28.html</url>
    <content><![CDATA[<p>继上一篇 《SpringBoot 集成 redis 分布式锁》 写到最后，我们发现这种分布式锁也存在着缺陷，如果A在 setnx 成功后，A成功获取锁了，也就是锁已经存到 Redis 里面了，此时服务器异常关闭或是重启，将不会执行我们的设置过期时间操作，也就不会设置锁的有效期，这样的话锁就不会释放了，就会产生死锁。 </p>
<a id="more"></a>

<p>为了解决上篇出现的死锁问题，提出了双重防死锁，可以更好的解决死锁问题。</p>
<p>原理图如下:</p>
<p><img src="https://img-blog.csdnimg.cn/20190303142906677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Rhem91MQ==,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"> </p>
<h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>1、当A通过 setnx(lockkey,currenttime+timeout) 命令能成功设置 lockkey 时，即返回值为1；<br>2、当A通过 setnx(lockkey,currenttime+timeout) 命令不能成功设置 lockkey 时，这是不能直接断定获取锁失败；因为我们在设置锁时，设置了锁的超时时间 timeout，当前时间大于 redis 中存储键值为 lockkey 的 value 值时，可以认为上一任的拥有者对锁的使用权已经失效了，A就可以强行拥有该锁；具体判定过程如下；<br>3、A通过 get(lockkey)，获取 redis 中的存储键值为 lockkey 的 value 值，即获取锁的相对时间 lockvalueA；<br>4、lockvalueA!=null &amp;&amp; currenttime&gt;lockvalue，A通过当前的时间与锁设置的时间做比较，如果当前时间已经大于锁设置的时间临界，即可以进一步判断是否可以获取锁，否则说明该锁还在被占用，A就还不能获取该锁，结束，获取锁失败；<br>5、步骤4返回结果为 true 后，通过 getSet 设置新的超时时间，并返回旧值 lockvalueB，以作判断，因为在分布式环境，在进入这里时可能另外的进程获取到锁并对值进行了修改，只有旧值与返回的值一致才能说明中间未被其他进程获取到这个锁；<br>6、lockvalueB == null || lockvalueA==lockvalueB，判断：若果 lockvalueB 为null，说明该锁已经被释放了，此时该进程可以获取锁；旧值与返回的 lockvalueB 一致说明中间未被其他进程获取该锁，可以获取锁；否则不能获取锁，结束，获取锁失败。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>项目代码结构图</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g7ud9m50ayj30fv0lv0tj.jpg" alt="1570783101690"></p>
<p>把上篇的拦截器类（LockMethodInterceptor）的代码修改如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.twosample.chen.distributed.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tuhu.twosample.chen.distributed.annotation.CacheLock;</span><br><span class="line"><span class="keyword">import</span> com.tuhu.twosample.chen.distributed.common.CacheKeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.util.PropertiesUtil;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/11 16:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockMethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LockMethodInterceptor</span><span class="params">(StringRedisTemplate lockRedisTemplate, CacheKeyGenerator cacheKeyGenerator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockRedisTemplate = lockRedisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.cacheKeyGenerator = cacheKeyGenerator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate lockRedisTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CacheKeyGenerator cacheKeyGenerator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(public * *(..)) &amp;&amp; @annotation(com.tuhu.twosample.chen.distributed.annotation.CacheLock)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interceptor</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MethodSignature signature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        CacheLock lock = method.getAnnotation(CacheLock.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(lock.prefix())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"lock key can't be null..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String lockKey = cacheKeyGenerator.getLockKey(pjp);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> lockTime = lock.expire();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//key不存在才能设置成功，获得了分布式锁，设置锁过期时间</span></span><br><span class="line">            <span class="keyword">final</span> Boolean success = lockRedisTemplate.opsForValue().setIfAbsent(lockKey, String.valueOf(System.currentTimeMillis()+lockTime));</span><br><span class="line">            <span class="keyword">if</span> (success) &#123;</span><br><span class="line">                lockRedisTemplate.expire(lockKey, lock.expire(), lock.timeUnit());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                String lockValueA = lockRedisTemplate.opsForValue().get(lockKey);</span><br><span class="line">                <span class="comment">//查到锁的值并与当前时间比较检查其是否已经超时，若超时则可以重新获取锁</span></span><br><span class="line">                <span class="keyword">if</span> (lockValueA!=<span class="keyword">null</span> &amp;&amp; System.currentTimeMillis() &gt; Long.valueOf(lockValueA))&#123;</span><br><span class="line">                    <span class="comment">//通过用当前时间戳 getAndSet 操作会给对应的key设置新的值并返回旧值，这是一个原子操作</span></span><br><span class="line">                    String lockValueB = lockRedisTemplate.opsForValue().getAndSet(lockKey,String.valueOf(System.currentTimeMillis()+lockTime));</span><br><span class="line">                    <span class="comment">//redis返回nil,则说明该值已经无效</span></span><br><span class="line">                    <span class="keyword">if</span> (lockValueB == <span class="keyword">null</span> &amp;&amp; StringUtils.pathEquals(lockValueA,lockValueB))&#123;</span><br><span class="line">                        <span class="comment">//获取锁成功</span></span><br><span class="line">                        lockRedisTemplate.expire(lockKey, lock.expire(), lock.timeUnit());</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//获取锁失败</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请勿重复请求"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//按理来说 我们应该抛出一个自定义的 CacheLockException 异常;</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请勿重复请求"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"系统异常"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果演示的话需要注释该代码;实际应该放开</span></span><br><span class="line">            <span class="comment">// lockRedisTemplate.delete(lockKey);</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们双重防死锁的 redis 分布式锁也已经实现了。</p>
<h2 id="优化点"><a href="#优化点" class="headerlink" title="优化点"></a>优化点</h2><p>加入了超时时间判断锁是否超时了，即使A在成功设置了锁之后，服务器就立即出现宕机或是重启，也不会出现死锁问题；因为B在尝试获取锁的时候，如果不能setnx成功，会去获取 redis 中锁的超时时间与当前的系统时间做比较，如果当前的系统时间已经大于锁超时时间，说明A已经对锁的使用权失效，B能继续判断能否获取锁，解决了redis分布式锁的死锁问题。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 集成 redis 分布式锁</title>
    <url>/archives/2902b1c9.html</url>
    <content><![CDATA[<p>继上一篇 《SpringBoot 整合 redis 踩坑日志》之后，又学习了 redis 分布式锁，那为什么需要分布式锁？</p>
<a id="more"></a>

<h2 id="redis-分布式锁原理"><a href="#redis-分布式锁原理" class="headerlink" title="redis 分布式锁原理"></a>redis 分布式锁原理</h2><p>在传统单体应用单机部署的情况下，可以使用Java并发相关的锁，如ReentrantLcok或synchronized进行互斥控制。但是，随着业务发展的需要，原单体单机部署的系统，渐渐的被部署在多机器多JVM上同时提供服务，这使得原单机部署情况下的并发控制锁策略失效了，为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题。 </p>
<h3 id="分布式锁的实现条件"><a href="#分布式锁的实现条件" class="headerlink" title="分布式锁的实现条件"></a>分布式锁的实现条件</h3><ul>
<li>互斥性，和单体应用一样，要保证任意时刻，只能有一个客户端持有锁 </li>
<li>可靠性，要保证系统的稳定性，不能产生死锁 </li>
<li>一致性，要保证锁只能由加锁人解锁，不能产生A的加锁被B用户解锁的情况 </li>
</ul>
<h3 id="分布式锁的实现"><a href="#分布式锁的实现" class="headerlink" title="分布式锁的实现"></a>分布式锁的实现</h3><p>Redis实现分布式锁不同的人可能有不同的实现逻辑，但是核心就是下面三个方法。 </p>
<p>1.SETNXSETNX key val 当且仅当 key 不存在时，set 一个 key 为 val 的字符串，返回1；若 key存在，则什么都不做，返回0。</p>
<p>2.Expireexpire key timeout 为 key 设置一个超时时间，单位为second，超过这个时间锁会自动释放，避免死锁。</p>
<p>3.Deletedelete key 删除 key 。</p>
<p>原理图如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20190303135212531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Rhem91MQ==,size_16,color_FFFFFF,t_70" alt="分布式锁"> </p>
<h2 id="redis-分布式锁实战"><a href="#redis-分布式锁实战" class="headerlink" title="redis 分布式锁实战"></a>redis 分布式锁实战</h2><p>项目代码结构图</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g7ud9m50ayj30fv0lv0tj.jpg" alt="1570783101690"></p>
<h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p>在 pom.xml 中添加 <code>starter-web</code>、<code>starter-aop</code>、<code>starter-data-redis</code> 的依赖 </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<h3 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h3><p>在 <code>application.properites</code> 资源文件中添加 <code>redis</code> 相关的配置项 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">1999</span></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//127.0.0.1:3306/mybatis-plus-test?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    driverClassName: com.mysql.cj.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">  redis:</span><br><span class="line">    host: <span class="number">127.0</span>.0.1</span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    timeout: <span class="number">5000</span>ms</span><br><span class="line">    password:</span><br><span class="line">    database: <span class="number">0</span></span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: <span class="number">50</span></span><br><span class="line">        max-wait: <span class="number">3000</span>ms</span><br><span class="line">        max-idle: <span class="number">20</span></span><br><span class="line">        min-idle: <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>1.创建一个 <code>CacheLock</code> 注解，属性配置如下 </p>
<ul>
<li>prefix： 缓存中 key 的前缀 </li>
<li>expire： 过期时间，此处默认为 5 秒 </li>
<li>timeUnit： 超时单位，此处默认为秒 </li>
<li>delimiter： key 的分隔符，将不同参数值分割开来 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.twosample.chen.distributed.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 锁的注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/11 16:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheLock &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis 锁key的前缀</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> redis 锁key的前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期秒数,默认为5秒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 轮询锁的时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">expire</span><span class="params">()</span> <span class="keyword">default</span> 5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时时间单位</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TimeUnit <span class="title">timeUnit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.SECONDS</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Key的分隔符（默认 :）&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;生成的Key：N:SO1008:500&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">delimiter</span><span class="params">()</span> <span class="keyword">default</span> ":"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、 key 的生成规则是自己定义的，如果通过表达式语法自己得去写解析规则还是比较麻烦的，所以依旧是用注解的方式 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.twosample.chen.distributed.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 锁的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/11 16:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER, ElementType.METHOD, ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheParam &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字段名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="key生成策略"><a href="#key生成策略" class="headerlink" title="key生成策略"></a>key生成策略</h3><p><strong>1、接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.twosample.chen.distributed.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * key生成器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/11 16:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CacheKeyGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取AOP参数,生成指定缓存Key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp PJP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存KEY</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getLockKey</span><span class="params">(ProceedingJoinPoint pjp)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、接口实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.twosample.chen.distributed.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tuhu.twosample.chen.distributed.annotation.CacheLock;</span><br><span class="line"><span class="keyword">import</span> com.tuhu.twosample.chen.distributed.annotation.CacheParam;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ReflectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过接口注入的方式去写不同的生成规则</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/11 16:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockKeyGenerator</span> <span class="keyword">implements</span> <span class="title">CacheKeyGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLockKey</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        CacheLock lockAnnotation = method.getAnnotation(CacheLock.class);</span><br><span class="line">        <span class="keyword">final</span> Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="keyword">final</span> Parameter[] parameters = method.getParameters();</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//默认解析方法里面带 CacheParam 注解的属性,如果没有尝试着解析实体对象中的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> CacheParam annotation = parameters[i].getAnnotation(CacheParam.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            builder.append(lockAnnotation.delimiter()).append(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(builder.toString())) &#123;</span><br><span class="line">            <span class="keyword">final</span> Annotation[][] parameterAnnotations = method.getParameterAnnotations();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterAnnotations.length; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> Object object = args[i];</span><br><span class="line">                <span class="keyword">final</span> Field[] fields = object.getClass().getDeclaredFields();</span><br><span class="line">                <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                    <span class="keyword">final</span> CacheParam annotation = field.getAnnotation(CacheParam.class);</span><br><span class="line">                    <span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    builder.append(lockAnnotation.delimiter()).append(ReflectionUtils.getField(field, object));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lockAnnotation.prefix() + builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lock拦截器（AOP）"><a href="#Lock拦截器（AOP）" class="headerlink" title="Lock拦截器（AOP）"></a>Lock拦截器（AOP）</h3><p>熟悉 <code>Redis</code> 的朋友都知道它是线程安全的，我们利用它的特性可以很轻松的实现一个分布式锁，如 <code>opsForValue().setIfAbsent(key,value)</code>它的作用就是如果缓存中没有当前 Key 则进行缓存同时返回 <code>true</code> 反之亦然；当缓存后给 key 在设置个过期时间，防止因为系统崩溃而导致锁迟迟不释放形成死锁； 那么我们是不是可以这样认为当返回 <code>true</code> 我们认为它获取到锁了，在锁未释放的时候我们进行异常的抛出…. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.twosample.chen.distributed.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tuhu.twosample.chen.distributed.annotation.CacheLock;</span><br><span class="line"><span class="keyword">import</span> com.tuhu.twosample.chen.distributed.common.CacheKeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/11 16:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockMethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LockMethodInterceptor</span><span class="params">(StringRedisTemplate lockRedisTemplate, CacheKeyGenerator cacheKeyGenerator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockRedisTemplate = lockRedisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.cacheKeyGenerator = cacheKeyGenerator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate lockRedisTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CacheKeyGenerator cacheKeyGenerator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(public * *(..)) &amp;&amp; @annotation(com.tuhu.twosample.chen.distributed.annotation.CacheLock)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interceptor</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MethodSignature signature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        CacheLock lock = method.getAnnotation(CacheLock.class);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(lock.prefix())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"lock key can't be null..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String lockKey = cacheKeyGenerator.getLockKey(pjp);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//key不存在才能设置成功</span></span><br><span class="line">            <span class="keyword">final</span> Boolean success = lockRedisTemplate.opsForValue().setIfAbsent(lockKey, <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">if</span> (success) &#123;</span><br><span class="line">                lockRedisTemplate.expire(lockKey, lock.expire(), lock.timeUnit());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//按理来说 我们应该抛出一个自定义的 CacheLockException 异常;</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请勿重复请求"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"系统异常"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果演示的话需要注释该代码;实际应该放开</span></span><br><span class="line">            <span class="comment">// lockRedisTemplate.delete(lockKey);</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><p>在接口方法上添加 <code>@CacheLock(prefix = &quot;test&quot;)</code>，然后动态的值可以加上<code>@CacheParam</code>；生成后的新 key 将被缓存起来；（如：该接口 token = 1，那么最终的 key 值为 test:1，如果多个条件则依次类推） </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.twosample.chen.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tuhu.twosample.chen.distributed.annotation.CacheLock;</span><br><span class="line"><span class="keyword">import</span> com.tuhu.twosample.chen.distributed.annotation.CacheParam;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/10/11 16:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/chen/lock"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CacheLock</span>(prefix = <span class="string">"test"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">query</span><span class="params">(@CacheParam(name = <span class="string">"token"</span>)</span> @RequestParam String token) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success - "</span> + token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p>需要注入前面定义好的 <code>CacheKeyGenerator</code> 接口具体实现 …. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tuhu.twosample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tuhu.twosample.chen.distributed.common.CacheKeyGenerator;</span><br><span class="line"><span class="keyword">import</span> com.tuhu.twosample.chen.distributed.common.LockKeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019-08-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.baomidou.mybatisplus.samples.quickstart.mapper"</span>)</span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.tuhu.twosample.chen.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoSampleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TwoSampleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheKeyGenerator <span class="title">cacheKeyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LockKeyGenerator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动项目，在postman中输入url：&lt;<a href="http://localhost:1999/chen/lock/test?token=1" target="_blank" rel="noopener">http://localhost:1999/chen/lock/test?token=1</a> &gt; </p>
<p>第一次请求结果： </p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g7udb5baudj316p0lugmx.jpg" alt="1570783805599"></p>
<p>第二次请求结果： </p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g7udbd5nysj316r0lh762.jpg" alt="1570783834354"></p>
<p>等key过期了请求又恢复正常。 </p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>但是这种分布式锁也存在着缺陷，如果A在setnx成功后，A成功获取锁了，也就是锁已经存到 Redis 里面了，此时服务器异常关闭或是重启，将不会执行我们的业务逻辑，也就不会设置锁的有效期，这样的话锁就不会释放了，就会产生死锁。 所以还需要对锁进行优化，好好学习学习，嘎嘎嘎嘎。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 整合 redis 踩坑日志</title>
    <url>/archives/50eb438f.html</url>
    <content><![CDATA[<p>SpringBoot 中除了了对常用的关系型数据库提供了优秀的自动化测试以外，对于很多 NoSQL 数据库一样提供了自动化配置的支持，包括：Redis, MongoDB, Elasticsearch, Solr 和 Cassandra。 </p>
<h2 id="整合redis"><a href="#整合redis" class="headerlink" title="整合redis"></a>整合redis</h2><p>Redis是一个速度非常快的非关系型数据库（non-relational database），它可以存储键（key）与5种不同类型的值（value）之间的映射（mapping），可以将存储在内存的键值对数据持久化到硬盘。可以使用复制特性来扩展读性能，还可以使用客户端分片来扩展写性能。</p>
<ul>
<li><a href="https://redis.io" target="_blank" rel="noopener">redis官网</a></li>
<li><a href="http://www.redis.cn" target="_blank" rel="noopener">redis中文社区</a><a id="more"></a>

</li>
</ul>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>Spring Boot 提供了对 Redis 集成的组件包：spring-boot-starter-data-redis，spring-boot-starter-data-redis依赖于spring-data-redis 和 lettuce 。 </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><p>在<code>application.properties</code>中加入Redis服务端的相关配置 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#redis配置</span><br><span class="line">#Redis服务器地址</span><br><span class="line">spring.redis.host=<span class="number">127.0</span>.0.1</span><br><span class="line">#Redis服务器连接端口</span><br><span class="line">spring.redis.port=<span class="number">6379</span></span><br><span class="line">#Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database=<span class="number">0</span>  </span><br><span class="line">#连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.jedis.pool.max-active=<span class="number">50</span></span><br><span class="line">#连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.jedis.pool.max-wait=<span class="number">3000</span>ms</span><br><span class="line">#连接池中的最大空闲连接</span><br><span class="line">spring.redis.jedis.pool.max-idle=<span class="number">20</span></span><br><span class="line">#连接池中的最小空闲连接</span><br><span class="line">spring.redis.jedis.pool.min-idle=<span class="number">2</span></span><br><span class="line">#连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=<span class="number">5000</span>ms</span><br></pre></td></tr></table></figure>

<p><strong>其中 spring.redis.database 的配置通常使用0即可，Redis 在配置的时候可以设置数据库数量，默认为16，可以理解为数据库的 schema</strong> </p>
<h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p>通过编写测试用例，举例说明如何访问Redis。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstSampleApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 保存字符串</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">"name"</span>, <span class="string">"chen"</span>);</span><br><span class="line">        Assert.assertEquals(<span class="string">"chen"</span>, stringRedisTemplate.opsForValue().get(<span class="string">"name"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的案例通过自动配置的 <code>StringRedisTemplate</code> 对象进行 redis 的对写操作，从对象命名就可注意到支持的是string 类型，如果有用过 spring-data-redis 的开发者一定熟悉 <code>RedisTemplate&lt;K,V&gt;</code> 接口，<code>StringRedisTemplate</code>就相当于<code>RedisTemplate&lt;String, String&gt;</code>的实现。</p>
<p>除了 String 类型，实战中经常会在 redis 中储存对象，我们就要在储存对象时对对象进行序列化。下面通过一个实例来完成对象的对写操作。</p>
<p><strong>创建 User 实体</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置针对对象的RedisTemplate实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfiguration</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采用RedisCacheManager作为缓存管理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisCacheManager redisCacheManager = RedisCacheManager.create(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span>  redisCacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//解决键、值序列化问题</span></span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>完成了配置工作后，编写测试用例实验效果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstSampleApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//保存对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">"chen"</span>);</span><br><span class="line">        user.setAge(<span class="number">22</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(user.getUserName(), user);</span><br><span class="line">        log.info(<span class="string">"result:&#123;&#125;"</span>,redisTemplate.opsForValue().get(<span class="string">"chen"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们就能对对象进行缓存了。但是在对 redis 更深入的了解中，一不小心就踩进坑里去了，下面对 redis 踩的坑做下记录。</p>
<h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><h3 id="踩坑1：cacheable注解引发的乱码问题"><a href="#踩坑1：cacheable注解引发的乱码问题" class="headerlink" title="踩坑1：cacheable注解引发的乱码问题"></a>踩坑1：cacheable注解引发的乱码问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/chen/user"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"redis_key"</span>,key = <span class="string">"#name"</span>,unless = <span class="string">"#result == null"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String name)</span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setAge(<span class="number">22</span>);</span><br><span class="line">        user.setEmail(<span class="string">"chen_ti@outlook.com"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在使用 SpringBoot1.x 的时候，通过简单的配置 RedisTemplete 就可以了，升级到 SpringBoot2.0，spring-boot-starter-data-redis 也跟着升起来了，@Cacheable 就出现了乱码的情况，可以通过将上面的配置文件 RedisConfiguration 做如下更改解决 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfiguration</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, String&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        <span class="comment">// 配置序列化</span></span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))             .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer));</span><br><span class="line">        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(redisCacheConfiguration)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="踩坑2：redis-获取缓存异常"><a href="#踩坑2：redis-获取缓存异常" class="headerlink" title="踩坑2：redis 获取缓存异常"></a>踩坑2：redis 获取缓存异常</h3><p>报错信息:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to com.tuhu.twosample.chen.entity.User</span><br></pre></td></tr></table></figure>

<p>Redis获取缓存异常：java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to XXX。</p>
<p>出现这种异常，我们需要自定义 <code>ObjectMapper</code>，设置一些参数，而不是直接使用 Jackson2JsonRedisSerializer 类中黙认的 ObjectMapper，看源代码可以知道，Jackson2JsonRedisSerializer 中的 ObjectMapper 是直接使用new ObjectMapper() 创建的，这样 ObjectMapper 会将 redis 中的字符串反序列化为 java.util.LinkedHashMap类型，导致后续 Spring 对其进行转换成报错。其实我们只要它返回 Object 类型就可以了。</p>
<p>使用以下方法，构建一个 <code>Jackson2JsonRedisSerializer</code> 对象，将其注入 <code>RedisCacheManager</code> 即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通过自定义配置构建Redis的Json序列化器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Jackson2JsonRedisSerializer对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Jackson2JsonRedisSerializer&lt;Object&gt; <span class="title">jackson2JsonRedisSerializer</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer =</span><br><span class="line">               <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">       ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">       objectMapper.configure(MapperFeature.USE_ANNOTATIONS, <span class="keyword">false</span>);</span><br><span class="line">       objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">       objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="keyword">false</span>);</span><br><span class="line">       <span class="comment">// 此项必须配置，否则会报java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to XXX</span></span><br><span class="line">       objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">       objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">       jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">       <span class="keyword">return</span> jackson2JsonRedisSerializer;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="踩坑3：类转移路径"><a href="#踩坑3：类转移路径" class="headerlink" title="踩坑3：类转移路径"></a>踩坑3：类转移路径</h3><p><strong>异常打印:</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="number">19</span>:<span class="number">32</span>:<span class="number">47</span> INFO  - Started Application in <span class="number">10.932</span> seconds (JVM running <span class="keyword">for</span> <span class="number">12.296</span>)</span><br><span class="line"><span class="number">19</span>:<span class="number">32</span>:<span class="number">50</span> INFO  - get data from redis, key = <span class="number">10</span>d044f9-<span class="number">0e94</span>-<span class="number">420</span>b-<span class="number">9631</span>-b83f5ca2ed30</span><br><span class="line"><span class="number">19</span>:<span class="number">32</span>:<span class="number">50</span> WARN  - /market/renewal/homePage/index</span><br><span class="line">org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Could not resolve type id 'com.pa.market.common.util.UserInfoExt' into a subtype of [simple type, class java.lang.Object]: no such class found</span><br><span class="line"> at [Source: [B@641a684c; line: 1, column: 11]; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'com.pa.market.common.util.UserInfoExt' into a subtype of [simple type, class java.lang.Object]: no such class found at [Source: [B@641a684c; line: 1, column: 11]</span><br></pre></td></tr></table></figure>

<p>*<em>问题原因: *</em></p>
<p>项目中使用了拦截器，对每个 http 请求进行拦截。通过前端传递过来的 token，去 redis 缓存中获取用户信息UserInfoExt，用户信息是在用户登录的时候存入到 redis 缓存中的。根据获取到的用户信息来判断是否存是登录状态。 所以除白名单外的 url，其他请求都需要进行这个操作。通过日志打印，很明显出现在 UserInfoExt 对象存储到 redis 中序列化和反序列化的操作步骤。 </p>
<p><strong>解决办法:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;K, V&gt; <span class="title">redisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RedisTemplate&lt;K, V&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;K, V&gt;();</span><br><span class="line">    redisTemplate.setConnectionFactory(jedisConnectionFactory());</span><br><span class="line">    redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">    redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">    <span class="keyword">return</span> redisTemplate;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>查看 redis 的 Bean 定义发现，对 key 的序列化使用的是 <code>StringRedisSerializer</code> 系列化，value 值的序列化是<code>GenericJackson2JsonRedisSerializer</code> 的序列化方法。</p>
<p>其中 <code>GenericJackson2JsonRedisSerializer</code> 序列化方法会在 redis 中记录类的 <code>@class</code> 信息，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"@class"</span>: <span class="string">"com.pa.market.common.util.UserInfoExt"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"www.baidu.com"</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"baidu"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>“@class”: “com.pa.market.common.util.UserInfoExt”，每个对象都会有这个 id 存在（可以通过源码看出为嘛有这个 @class），如果用户一直处在登录状态，是以 com.pa.market.common.util.UserInfoExt 这个路径进行的序列化操作。但是移动了 UserInfoExt 的类路径后，包全名变了。所以会抛出 no such class found 的异常。这样在判断用户是否存在的地方就抛出了异常，故而所有的请求都失败了，已经登录的用户没法进行任何操作。</p>
<p>ok 把踩的坑都记录下来，终于呼出了最后一口气，以后遇到这种坑都能从容的避开了，但是 redis 中的坑还有很多，可能以后还是会轻轻松松的跳进去。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 中使用 RabbitMQ</title>
    <url>/archives/602dea59.html</url>
    <content><![CDATA[<p>今日内容是消息队列。大佬讲了三个消息队列分别是 Pegion、Kafka 和 RabbitMQ。其中 Pegion 是公司自己研发的组件。今天主要在 SpringBoot 中集成 RabbitMQ , 将消息储存在消息队列中并消费的过程。</p>
<a id="more"></a>
<h2 id="Message-Broker-与-AMQP-简介"><a href="#Message-Broker-与-AMQP-简介" class="headerlink" title="Message Broker 与 AMQP 简介"></a>Message Broker 与 AMQP 简介</h2><p>Message Broker 是一种消息验证、传输、路由的架构模式，其设计目标主要应用于下面这些场景： </p>
<ul>
<li>消息路由到一个或多个目的地</li>
<li>消息转化为其他的表现方式</li>
<li>执行消息的聚集、消息的分解，并将结果发送到他们的目的地，然后重新组合相应返回给消息用户</li>
<li>调用Web服务来检索数据</li>
<li>响应事件或错误</li>
<li>使用发布-订阅模式来提供内容或基于主题的消息路由</li>
</ul>
<p>AMQP 是 Advanced Message Queuing Protocol 的简称，它是一个面向消息中间件的开放式标准应用层协议。AMQP 定义了这些特性： </p>
<ul>
<li>消息方向</li>
<li>消息队列</li>
<li>消息路由（包括：点到点和发布-订阅模式）</li>
<li>可靠性</li>
<li>安全性</li>
</ul>
<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>本文要介绍的 RabbitMQ 就是以 AMQP 协议实现的一种中间件产品，它可以支持多种操作系统，多种编程语言，几乎可以覆盖所有主流的企业级技术平台。 </p>
<h2 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h2><p>下面，我们通过在 SpringBoot 应用中整合 RabbitMQ，并实现一个简单的发送、接收消息的例子来对 RabbitMQ 有一个直观的感受和理解。</p>
<p>在 SpringBoot 中整合 RabbitMQ 是一件非常容易的事，因为之前我们已经介绍过 Starter POMs，其中的 AMQP 模块就可以很好的支持 RabbitMQ，下面我们就来详细说说整合过程：</p>
<ul>
<li>新建一个 SpringBoot 工程，命名为：“rabbitmq-hello”。</li>
<li>在<code>pom.xml</code>中引入如下依赖内容，其中<code>spring-boot-starter-amqp</code>用于支持 RabbitMQ。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>application.properties</code>中配置关于RabbitMQ的连接和用户信息，用户可以回到上面的安装内容，在管理页面中创建用户。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.application.name=rabbitmq-hello</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.host=localhost</span><br><span class="line">spring.rabbitmq.port=<span class="number">5672</span></span><br><span class="line">spring.rabbitmq.username=spring</span><br><span class="line">spring.rabbitmq.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建消息生产者<code>Sender</code>。通过注入<code>AmqpTemplate</code>接口的实例来实现消息的发送，<code>AmqpTemplate</code>接口定义了一套针对AMQP协议的基础操作。在 SpringBoot 中会根据配置来注入其具体实现。在该生产者，我们会产生一个字符串，并发送到名为<code>hello</code>的队列中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String context = <span class="string">"hello "</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(<span class="string">"Sender : "</span> + context);</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">"hello"</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建消息消费者<code>Receiver</code>。通过<code>@RabbitListener</code>注解定义该类对<code>hello</code>队列的监听，并用<code>@RabbitHandler</code>注解来指定对消息的处理方法。所以，该消费者实现了对<code>hello</code>队列的消费，消费操作为输出消息的字符串内容。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String hello)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver : "</span> + hello);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建RabbitMQ的配置类<code>RabbitConfig</code>，用来配置队列、交换器、路由等高级信息。这里我们以入门为主，先以最小化的配置来定义，以完成一个基本的生产和消费过程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">helloQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建应用主类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建单元测试类，用来调用消息生产：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@SpringApplicationConfiguration</span>(classes = HelloApplication.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Sender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sender.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完成程序编写之后，下面开始尝试运行。首先确保 RabbitMQ Server 已经开始，然后进行下面的操作：</p>
<ul>
<li>启动应用主类，从控制台中，我们看到如下内容，程序创建了一个访问<code>127.0.0.1:5672</code>中<code>springcloud</code>的连接。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">o.s.a.r.c.CachingConnectionFactory       : Created new connection: SimpleConnection@29836d32 [delegate=amqp://springcloud@127.0.0.1:5672/]</span><br></pre></td></tr></table></figure>

<p>同时，我们通过 RabbitMQ 的控制面板，可以看到 Connection 和 Channels 中包含当前连接的条目。</p>
<ul>
<li><p>运行单元测试类，我们可以看到控制台中输出下面的内容，消息被发送到了 RabbitMQ Server 的<code>hello</code>队列中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sender : hello Sun Sep 25 11:06:11 CST 2016</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到应用主类的控制台，我们可以看到类似如下输出，消费者对<code>hello</code>队列的监听程序执行了，并输出了接受到的消息信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Receiver : hello Sun Sep 25 11:06:11 CST 2016</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>大功告成！</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 优雅解决 ajax 跨域请求</title>
    <url>/archives/8c5dcb23.html</url>
    <content><![CDATA[<p>今天打开页面报错，地址是有效的，但浏览器会报 “No ‘Access-Control-Allow-Origin’ header is present on the requested resource “ 错误页面如下：</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g71ldngtkcj30qp065t9q.jpg" alt="1568621277875"></p>
<p>这是由于 ajax 跨域请求造成的</p>
<a id="more"></a>
<h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>由于浏览器同源策略（同源策略，它是由 Netscape 提出的一个著名的安全策略。现在所有支持JavaScript 的浏览器都会使用这个策略。所谓同源是指域名、协议、端口相同），凡是发送请求 url 的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。 </p>
<h2 id="How-does-it-works"><a href="#How-does-it-works" class="headerlink" title="How does it works ?"></a>How does it works ?</h2><p>CORS请求（包括预选的带有选项方法）被自动注册到各种 HandlerMapping 。他们处理 CROS 准备请求并拦截 CORS 简单和实际请求，这得益于 CorsProcessor 实现（默认情况下默认<a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java" target="_blank" rel="noopener">DefaultCorsProcessor </a>处理器），以便添加相关的CORS响应头（如 Access-Control-Allow-Origin ）。 <a href="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfiguration.html" target="_blank" rel="noopener">CorsConfiguration</a>  允许您指定CORS请求应该如何处理：允许 origins, headers, methods 等。</p>
<p>a、<code>AbstractHandlerMapping#setCorsConfiguration()</code> 允许指定一个映射，其中有几个<a href="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfiguration.html" target="_blank" rel="noopener">CorsConfiguration</a> 映射在路径模式上，比如/api/**。</p>
<p>b、子类可以通过重写AbstractHandlerMapping类的getCorsConfiguration(Object, HttpServletRequest)方法来提供自己的CorsConfiguration。</p>
<p>c、处理程序可以实现 <a href="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfigurationSource.html" target="_blank" rel="noopener"><code>CorsConfigurationSource</code></a> 接口（如<a href="https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java" target="_blank" rel="noopener"><code>ResourceHttpRequestHandler</code></a>），以便为每个请求提供一个<a href="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfiguration.html" target="_blank" rel="noopener">CorsConfiguration</a>。</p>
<h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><h3 id="普通跨域请求解决方案"><a href="#普通跨域请求解决方案" class="headerlink" title="普通跨域请求解决方案"></a><strong>普通跨域请求解决方案</strong></h3><p><strong>1. 请求接口添加注解</strong> <code>@CrossOrigin(origins = &quot;*&quot;, maxAge = 3600)</code></p>
<p>说明：<code>origins = &quot;*&quot;</code> origins 值为当前请求该接口的域 </p>
<p><strong>2. 通用配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跨域请求配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chendesheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019/9/16 19:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>,buildconfig());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CorsConfiguration <span class="title">buildconfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ajax自定义headers的跨域请求"><a href="#ajax自定义headers的跨域请求" class="headerlink" title="ajax自定义headers的跨域请求"></a><strong>ajax自定义headers的跨域请求</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">        type:<span class="string">"GET"</span>,</span><br><span class="line">        url:<span class="string">"http://localhost:8766/main/currency/sginInState"</span>,</span><br><span class="line">        dataType:<span class="string">"JSON"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            uid:userId</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">XMLHttpRequest</span>) </span>&#123;</span><br><span class="line">            XMLHttpRequest.setRequestHeader(<span class="string">"Authorization"</span>, access_token);</span><br><span class="line">        &#125;,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res.code)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>此处请求报错：OPTIONS <a href="http://localhost:8766/main/currency/sginInState" target="_blank" rel="noopener">http://localhost:8766/main/currency/sginInState</a> 500 </p>
<p>普通跨域的解决方案已经无法解决这种问题，为什么会出现OPTIONS请求呢？ </p>
<p>原因：</p>
<p>浏览器会在发送真正请求之前，先发送一个方法为OPTIONS的预检请求 Preflighted requests 这个请求是用来验证本次请求是否安全的，但是并不是所有请求都会发送，需要符合以下条件： </p>
<ul>
<li>请求方法不是GET/HEAD/POST </li>
<li>POST 请求的 Content-Type 并非 application/x-www-form-urlencoded, multipart/form-data 或text/plain </li>
<li>请求设置了自定义的header字段 </li>
</ul>
<p>对于管理端的接口，我有对接口进行权限校验，每次请求需要在header中携带自定义的字段（token），所以浏览器会多发送一个 OPTIONS 请求去验证此次请求的安全性。 </p>
<p>为何 OPTIONS 请求是500呢？</p>
<p>OPTIONS请求只会携带自定义的字段，并不会将相应的值带入进去，而后台校验 token 字段时 token 为 NULL，所以验证不通过，抛出了一个异常。</p>
<p>如何解决这个异常？</p>
<p><strong>1. spring boot项目application.yml中添加</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">mvc:</span><br><span class="line">dispatch-options-request: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 添加过滤器配置</strong></p>
<p> 第一步：手写 RequestFilter 请求过滤器配置类此类需要实现 HandlerInterceptor 类，HandlerInterceptor 类是 org.springframework.web.servlet.HandlerInterceptor 下的。 </p>
<p>具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestFilter</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandler</span><span class="params">(HttpServletRequest request,HttpServletResponse response,Object handler)</span></span>&#123;</span><br><span class="line">       response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">       response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">       response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS"</span>);</span><br><span class="line">       response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"86400"</span>);</span><br><span class="line">       response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Authorization"</span>);</span><br><span class="line">       <span class="comment">// 如果是OPTIONS请求则结束</span></span><br><span class="line">       <span class="keyword">if</span> (HttpMethod.OPTIONS.toString().equals(request.getMethod())) &#123;</span><br><span class="line">           response.setStatus(HttpStatus.NO_CONTENT.value());</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步：手写 MyWebConfiguration 此类需要继承 WebMvcConfigurationSupport 。 </p>
<p>具体代码实现： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RequestFilter requestFilter;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 跨域拦截器</span></span><br><span class="line">        registry.addInterceptor(requestFilter).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就优雅的解决了 ajax 跨域请求的问题。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 中的 Optional 类的基本使用</title>
    <url>/archives/6b3f5036.html</url>
    <content><![CDATA[<p>Java8 引入了一个十分有趣的 Optional 类它主要是为了解决臭名昭著的空指针异常（NullPointerException）。当我们对对象的属性进行检查，判断它的值是否为期望的格式，最终却发现我们查看的并不是一个对象，而是一个空指针，它会立即抛出一个让人厌烦的 NullPointerException 异常。    </p>
<h2 id="抛砖"><a href="#抛砖" class="headerlink" title="抛砖"></a>抛砖</h2><p>我们来看一个简单的实例：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String address = world.getCountry.getCity.getName;</span><br></pre></td></tr></table></figure>

<p>在得到地址之前，需要对各个类进行检查防止出现空指针异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">(World world)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (world != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Country country = world.getCountry();</span><br><span class="line">            <span class="keyword">if</span> (country!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                City city = country.getCity();</span><br><span class="line">                <span class="keyword">if</span> (city != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> city.getName();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"unknown"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到上面的检查有多么繁杂，代码中充斥着空检查，可读性糟糕透顶。</p>
<h2 id="Optional-类入门"><a href="#Optional-类入门" class="headerlink" title="Optional 类入门"></a>Optional 类入门</h2><p>变量存在时， Optional 类只是对类简单封装。变量不存在时，缺失的值会被建模成一个“空” 的 Optional 对象，由方法 Optional.empty() 返回。  那你可能就会疑惑，null 和  Optional.empty() 的区别在哪呢？从语义上，你可以把它们当作一回事儿，但是实际中它们之间的差别非常 大 ： 如果你尝试解引用一个 null ， 一定会触发NullPointerException ， 不过使用 Optional.empty() 就完全没事儿，它是 Optional 类的一个有效对象，多种场景都能调用，非常有用。     </p>
<h2 id="应用-Optional-的几种模式"><a href="#应用-Optional-的几种模式" class="headerlink" title="应用 Optional 的几种模式"></a>应用 Optional 的几种模式</h2><h3 id="创建-Optional-对象实例"><a href="#创建-Optional-对象实例" class="headerlink" title="创建 Optional 对象实例"></a>创建 Optional 对象实例</h3><p>可以创建一个空的 Optional 对象实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>(expected = NoSuchElementException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOptionalObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Optional&lt;String&gt; country = Optional.empty();</span><br><span class="line">        country.get();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>毫无疑问，当我们调用 get() 方法会报 NoSuchElementException 异常</p>
<p>还可以使用 of() 和 ofNullable() 方法创建包含值的 Optioanal 实例，区别在于如果将 null 当作参数传进去 of() 会报空指针异常，所以对象可能存在或者不存在，应该使用 ofNullable()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOptionalObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Optional&lt;String&gt; country = Optional.of(<span class="string">"中国"</span>);</span><br><span class="line">        Optional&lt;String&gt; city = Optional.ofNullable(<span class="string">"上海"</span>);</span><br><span class="line">        Optional&lt;String&gt; world = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//下面会报空指针异常</span></span><br><span class="line">        Optional&lt;String&gt; province = Optional.of(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如何获取Optional变量中的值 ？Optional 提供了一个 get() 方法。不过 get方法在遭遇到空的Optional对象时也会抛出异常，所以不按照约定的方式使用它，又会让我们再度陷入由null引起的代码维护的梦魇。</p>
<h3 id="访问-Optional-对象的值"><a href="#访问-Optional-对象的值" class="headerlink" title="访问 Optional 对象的值"></a>访问 Optional 对象的值</h3><p>从 <em>Optional</em> 实例中取回实际值对象的方法之一是使用 <em>get()</em> 方法： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getOptionalObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String country = <span class="string">"China"</span></span><br><span class="line">        Optional&lt;String&gt; countryName = Optional.ofNullable(country);</span><br><span class="line">        </span><br><span class="line">        Assert.assertEquals(<span class="string">"China"</span>,countryName.get());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>当然这个方法会在值为null时抛出异常，要避免异常，首先要进行检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getOptionalObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">       City city = <span class="keyword">new</span> City(<span class="string">"ShangHai"</span>);</span><br><span class="line">       Optional&lt;City&gt; sample = Optional.ofNullable(city);</span><br><span class="line">       Assert.assertTrue(sample.isPresent());</span><br><span class="line"></span><br><span class="line">       Assert.assertEquals(city.getName(),sample.get().getName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>检查是否有值还有另外一个方法 ifPresent()，该方法除了检查还会传入一个 Consumer(消费者) 参数，如果对象不是空的，就会执行传入的 Lambda 表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getOptionalObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        City city = <span class="keyword">new</span> City(<span class="string">"ShangHai"</span>);</span><br><span class="line">        Optional&lt;City&gt; sample = Optional.ofNullable(city);</span><br><span class="line">        sample.ifPresent(c -&gt; Assert.assertEquals(city.getName(),sample.get().getName()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如果对象不为空则为执行断言</p>
<h3 id="返回默认值"><a href="#返回默认值" class="headerlink" title="返回默认值"></a>返回默认值</h3><p>Optional 提供了 API 用以返回对象值，或者在对象为空的时候返回默认值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getOptionalObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        City city = <span class="keyword">null</span>;</span><br><span class="line">        City city1 = <span class="keyword">new</span> City(<span class="string">"ShangHai"</span>);</span><br><span class="line">        City sample = Optional.ofNullable(city).orElse(city1);</span><br><span class="line">        Assert.assertEquals(city1.getName(),sample.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第二个同类型的 API 是 <em>orElseGet()</em> —— 其行为略有不同。这个方法会在有值的时候返回值，如果没有值，它会执行作为参数传入的 <em>Supplier(供应者)</em> 函数式接口，并将返回其执行结果： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">City sample = Optional.ofNullable(city).orElseGet(() -&gt; city1);</span><br></pre></td></tr></table></figure>

<h3 id="返回异常"><a href="#返回异常" class="headerlink" title="返回异常"></a>返回异常</h3><p>Optional 还定义了 orElseThrow() API 它会在对象为空时抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>(expected = IllegalArgumentException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwOptionalException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        City city = <span class="keyword">null</span>;</span><br><span class="line">        City sample = Optional.ofNullable(city).orElseThrow(() -&gt; <span class="keyword">new</span> IllegalArgumentException());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>city 为空所以会抛出 <em>IllegalArgumentException</em></p>
<p>这个方法让我们有更丰富的语义，可以决定抛出什么样的异常，而不总是抛出 <em>NullPointerException</em>。 </p>
<h2 id="使用-Optional-的实战实例"><a href="#使用-Optional-的实战实例" class="headerlink" title="使用 Optional 的实战实例"></a>使用 Optional 的实战实例</h2><h3 id="使用map从-Optional-对象中提取和转换值"><a href="#使用map从-Optional-对象中提取和转换值" class="headerlink" title="使用map从 Optional 对象中提取和转换值"></a>使用map从 Optional 对象中提取和转换值</h3><p>从对象中提取信息是一种比较常见的模式，为了支持这种模式，Optional提供了一个map方法。它的工作方式如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void getCityName()&#123;</span><br><span class="line">        City city = new City(&quot;ShangHai&quot;);</span><br><span class="line">        Optional&lt;City&gt; sample = Optional.ofNullable(city);</span><br><span class="line">        Optional&lt;String&gt; name = sample.map(City::getName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>map 对值应用(调用)作为参数的函数，然后将返回的值包装在 Optional 中，这就使对返回值进行链试调用的操作成为可能，那是不是就可以对之前的代码进行重构呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title">getCityName</span><span class="params">(World world)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Optional&lt;World&gt; real = Optional.ofNullable(world);</span><br><span class="line">        Optional&lt;String&gt; name =</span><br><span class="line">                real.map(World::getCountry)</span><br><span class="line">                    .map(Country::getCity)</span><br><span class="line">                    .map(City::getName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>但是这段代码无法通过编译，real.map(World::getCountry) 返回的是 <code>Optional&lt;Country&gt;</code> 的实例这个没有问题，但是后面继续调用map产生的就是 <code>Optional&lt;Optional&lt;Country&gt;&gt;</code>类型的对象。说明你遭遇了嵌套式的 Optional 机构。</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g6wx101itej30vu0bl3yl.jpg" alt="optional"></p>
<p>两层Optional对象结构</p>
<h3 id="使用-flatMap-链接-Optional-对象"><a href="#使用-flatMap-链接-Optional-对象" class="headerlink" title="使用 flatMap 链接 Optional 对象"></a>使用 flatMap 链接 Optional 对象</h3><p>所以，我们该如何解决这个问题呢？让我们再回顾一下你刚刚在流上使用过的模式： flatMap 方法。使用流时， flatMap 方法接受一个函数作为参数，这个函数的返回值是另一个流。 这个方法会应用到流中的每一个元素，最终形成一个新的流的流。但是 flagMap 会用流的内容替 换每个新生成的流。换句话说，由方法生成的各个流会被合并或者扁平化为一个单一的流。这里 你希望的结果其实也是类似的，但是你想要的是将两层的 optional 合并为一个。    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title">getCityName</span><span class="params">(World world)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Optional&lt;World&gt; real = Optional.ofNullable(world);</span><br><span class="line">        Optional&lt;String&gt; name =</span><br><span class="line">                real.flagMap(World::getCountry)</span><br><span class="line">                    .flagMap(Country::getCity)</span><br><span class="line">                    .map(City::getName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-filter-剔除特定的值"><a href="#使用-filter-剔除特定的值" class="headerlink" title="使用 filter 剔除特定的值"></a>使用 filter 剔除特定的值</h3><p>你经常需要调用某个对象的方法，那么你首先要检查对象是否为NULL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filterCity</span><span class="params">(City city)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Optional&lt;City&gt; real = Optional.ofNullable(city);</span><br><span class="line">    real.filter(c -&gt; c!=<span class="keyword">null</span> &amp;&amp; <span class="string">"ShangHai"</span></span><br><span class="line">            .equals(c.getName()))</span><br><span class="line">            .ifPresent(x -&gt; System.out.println(<span class="string">"ok"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li><p>null 引用在历史上被引入到程序设计语言中，目的是为了表示变量值的缺失。    </p>
</li>
<li><p>Java 8中引入了一个新的类 java.util.Optional<t>，对存在或缺失的变量值进行 建模。    </t></p>
</li>
<li><p>你可以使用静态工厂方法 Optional.empty、 Optional.of 以及 Optional.ofNullable 创建 Optional 对象。    </p>
</li>
<li><p>Optional类支持多种方法，比如 map、 flatMap、 filter，它们在概念上与 Stream 类中对应的方法十分相似。    </p>
</li>
<li><p>使用 Optional 会迫使你更积极地解引用 Optional 对象，以应对变量值缺失的问题，最终，你能更有效地防止代码中出现不期而至的空指针异常。    </p>
</li>
<li><p>使用 Optional 能帮助你设计更好的 API，用户只需要阅读方法签名，就能了解该方法是否接受一个 Optional类型的值。    </p>
<p>​    </p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis参数格式化异常</title>
    <url>/archives/7e7c6151.html</url>
    <content><![CDATA[<p>昨天运行程序，程序报了mybatis参数格式化异常:NumberFormatException: For input string:”xx”，错误日志如下：</p>
<a id="more"></a>
<h2 id="错误日记"><a href="#错误日记" class="headerlink" title="错误日记"></a>错误日记</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">16</span>/<span class="number">08</span>/<span class="number">16</span> <span class="number">02</span>:<span class="number">15</span>:<span class="number">40</span>:<span class="number">040</span> CST] http-nio-<span class="number">8080</span>-exec-<span class="number">4</span> ERROR filter.ExceptionFilter:  [DUBBO] Got unchecked and undeclared exception which called by <span class="number">127.0</span>.0.1. service: cn.test.web.service.ShareService, method: getShareChannelStInfoList, exception: org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line">### Error querying database.  Cause: java.lang.NumberFormatException: For input string: "2016-08-11"</span><br><span class="line">### Cause: java.lang.NumberFormatException: For input string: "2016-08-11", dubbo version: 2.8.4, current host: 127.0.0.1</span><br><span class="line">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line">### Error querying database.  Cause: java.lang.NumberFormatException: For input string: "2016-08-11"</span><br><span class="line">### Cause: java.lang.NumberFormatException: For input string: "2016-08-11"</span><br><span class="line">    at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:<span class="number">76</span>)</span><br><span class="line">    at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:<span class="number">399</span>)</span><br><span class="line">    at com.sun.proxy.$Proxy32.selectList(Unknown Source)</span><br><span class="line">    at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:<span class="number">205</span>)</span><br><span class="line">    at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:<span class="number">122</span>)</span><br><span class="line">    at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:<span class="number">64</span>)</span><br><span class="line">    at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:<span class="number">53</span>)</span><br><span class="line">    at com.sun.proxy.$Proxy57.getShareChannelStInfo(Unknown Source)</span><br><span class="line">    at cn.test.web.repository.ShareStInfoRepo.getShareChannelList(ShareStInfoRepo.java:<span class="number">37</span>)</span><br><span class="line">    at cn.test.web.impl.ShareServiceImpl.getShareChannelStInfoList(ShareServiceImpl.java:<span class="number">72</span>)</span><br><span class="line">    at com.alibaba.dubbo.common.bytecode.Wrapper19.invokeMethod(Wrapper19.java)</span><br><span class="line">    at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$<span class="number">1</span>.doInvoke(JavassistProxyFactory.java:<span class="number">46</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:<span class="number">72</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:<span class="number">53</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:<span class="number">64</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$<span class="number">1</span>.invoke(ProtocolFilterWrapper.java:<span class="number">91</span>)</span><br><span class="line">    at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:<span class="number">75</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$<span class="number">1</span>.invoke(ProtocolFilterWrapper.java:<span class="number">91</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:<span class="number">42</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$<span class="number">1</span>.invoke(ProtocolFilterWrapper.java:<span class="number">91</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:<span class="number">78</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$<span class="number">1</span>.invoke(ProtocolFilterWrapper.java:<span class="number">91</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:<span class="number">70</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$<span class="number">1</span>.invoke(ProtocolFilterWrapper.java:<span class="number">91</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:<span class="number">132</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$<span class="number">1</span>.invoke(ProtocolFilterWrapper.java:<span class="number">91</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:<span class="number">38</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$<span class="number">1</span>.invoke(ProtocolFilterWrapper.java:<span class="number">91</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:<span class="number">38</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$<span class="number">1</span>.invoke(ProtocolFilterWrapper.java:<span class="number">91</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:<span class="number">52</span>)</span><br><span class="line">    at com.alibaba.dubbo.common.bytecode.proxy9.getShareChannelStInfoList(proxy9.java)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">    at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:<span class="number">137</span>)</span><br><span class="line">    at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:<span class="number">288</span>)</span><br><span class="line">    at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:<span class="number">242</span>)</span><br><span class="line">    at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:<span class="number">229</span>)</span><br><span class="line">    at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:<span class="number">356</span>)</span><br><span class="line">    at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:<span class="number">179</span>)</span><br><span class="line">    at org.jboss.resteasy.plugins.server.servlet.ServletContainerDispatcher.service(ServletContainerDispatcher.java:<span class="number">220</span>)</span><br><span class="line">    at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:<span class="number">56</span>)</span><br><span class="line">    at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:<span class="number">51</span>)</span><br><span class="line">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">729</span>)</span><br><span class="line">    at com.alibaba.dubbo.rpc.protocol.rest.DubboHttpServer$RestHandler.handle(DubboHttpServer.java:<span class="number">86</span>)</span><br><span class="line">    at com.alibaba.dubbo.remoting.http.servlet.DispatcherServlet.service(DispatcherServlet.java:<span class="number">64</span>)</span><br><span class="line">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">729</span>)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">292</span>)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">207</span>)</span><br><span class="line">    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">52</span>)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">240</span>)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">207</span>)</span><br><span class="line">    at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:<span class="number">123</span>)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">240</span>)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">207</span>)</span><br><span class="line">    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">212</span>)</span><br><span class="line">    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">106</span>)</span><br><span class="line">    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="number">502</span>)</span><br><span class="line">    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">141</span>)</span><br><span class="line">    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">79</span>)</span><br><span class="line">    at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:<span class="number">616</span>)</span><br><span class="line">    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">88</span>)</span><br><span class="line">    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">528</span>)</span><br><span class="line">    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:<span class="number">1099</span>)</span><br><span class="line">    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:<span class="number">672</span>)</span><br><span class="line">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1520</span>)</span><br><span class="line">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:<span class="number">1476</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1142</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">617</span>)</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br></pre></td></tr></table></figure>

<h2 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h2><p>这段代码，就是mybatis的动态查询，就是组装sql语句。但是，这里必须注意一个问题，那就是departmentName 和 ordertime,这两个变量是EarlyOrder中的私有变量，是String类型的。 错误的引起，是 <strong>departmentName</strong> != 0 引起的，原因给的是字符串，却拿一个数字比较，mybatis会做一些转化，结果在数字格式化时发生异常。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectEarlyOrder"</span>  resultType=<span class="string">"com.example.demo.model.EarlyOrder"</span>&gt;</span><br><span class="line">       select username,ordertime,overworktime,status,departmentname</span><br><span class="line">       from tabordermeal</span><br><span class="line">       &lt;where&gt;</span><br><span class="line">           <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"departmentName != 0 and departmentName != '' and departmentName !=null and departmentName != 'null'"</span>&gt;</span><br><span class="line">               and departmentName = #&#123;departmentName&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"ordertime != '' and ordertime !=null and ordertime != 'null'"</span>&gt;</span><br><span class="line">               and ordertime  LIKE  <span class="string">'$&#123;ordertime&#125;%'</span></span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">       &lt;/where&gt;</span><br><span class="line">       limit #&#123;pageindex&#125;,#&#123;pagesize&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h2 id="解决错误"><a href="#解决错误" class="headerlink" title="解决错误"></a>解决错误</h2><p>加单引号是无法解决的，比如：<code>departmentName != &#39;0&#39;</code>，此时，mybatis认为拿一个字符串(String)和一个字符(char)比较，也会报错。 因此，有几种方法可以解决此问题： </p>
<h3 id="转成字符串：-39-0-39-toString"><a href="#转成字符串：-39-0-39-toString" class="headerlink" title="转成字符串：&#39;0&#39;.toString()"></a>转成字符串：<code>&#39;0&#39;.toString()</code></h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectEarlyOrder"</span>  resultType=<span class="string">"com.example.demo.model.EarlyOrder"</span>&gt;</span><br><span class="line">       select username,ordertime,overworktime,status,departmentname</span><br><span class="line">       from tabordermeal</span><br><span class="line">       &lt;where&gt;</span><br><span class="line">           <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"departmentName != '0'.toString() and departmentName != '' and departmentName !=null and departmentName != 'null'"</span>&gt;</span><br><span class="line">               and departmentName = #&#123;departmentName&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"ordertime != '' and ordertime !=null and ordertime != 'null'"</span>&gt;</span><br><span class="line">               and ordertime  LIKE  <span class="string">'$&#123;ordertime&#125;%'</span></span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">       &lt;/where&gt;</span><br><span class="line">       limit #&#123;pageindex&#125;,#&#123;pagesize&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="加转义实体字符串引号-amp-quot"><a href="#加转义实体字符串引号-amp-quot" class="headerlink" title="加转义实体字符串引号&amp;quot;"></a>加转义实体字符串引号<code>&amp;quot;</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">if</span> test=\<span class="string">"departmentName != null and departmentName != "</span><span class="number">0</span><span class="string">"\"&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="外部单双引号交换："><a href="#外部单双引号交换：" class="headerlink" title="外部单双引号交换："></a>外部单双引号交换：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">'startd != null and startd != \"0\"'</span>&gt;</span><br></pre></td></tr></table></figure>

<p>注意：在xml配置中，使用第三种方式，不需要添加反斜杠(“<code>\</code>“),<code>&lt;if test=&#39;startd != null and startd != &quot;0&quot;&#39;&gt;</code> </p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>请给百度网盘加速100倍</title>
    <url>/archives/c623ee06.html</url>
    <content><![CDATA[<p>相信小伙伴平时的文件、资源都会保存在百度网盘上，但是有些资源比如视频是不能在线观看的，所以只能下载下来，但是除非我们是百度尊贵的 vip ，否则一定会为百度网盘的龟速下载抓狂，所以这里就要给百度网盘加速100倍，享受飞一般的感觉。</p>
<a id="more"></a>

<p>废话不多说先上图看效果，可以看到下载速度接近 3MB 每秒，这个速度依赖现有网络。</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g72m20rtdsj30xc043glj.jpg" alt="img"> </p>
<p>工具：<code>proxyee-down</code></p>
<p>工具地址：<a href="https://github.com/proxyee-down-org/proxyee-down" target="_blank" rel="noopener">https://github.com/proxyee-down-org/proxyee-down</a> </p>
<p>考虑到这个步骤有一些坑，尤其是没有技术背景的看文档可能还是有点困难，我这里把我的步骤讲一下，希望能够尽可能帮助到大家少走弯路。 </p>
<h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><p>地址：<br><a href="https://imhx-my.sharepoint.com/personal/pd_imhx_onmicrosoft_com/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fpd_imhx_onmicrosoft_com%2FDocuments%2Fproxyee-down" target="_blank" rel="noopener">https://imhx-my.sharepoint.com/personal/pd_imhx_onmicrosoft_com/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fpd_imhx_onmicrosoft_com%2FDocuments%2Fproxyee-down</a></p>
<p>里面有对应的版本，根据不同的操作系统下载就行。</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g72ltwjzibj31hc0begm9.jpg" alt="1568708511226"></p>
<p>比如我电脑版本是 windows 64 下载的是 <code>Proxyee Down.3.4.windows.x64.7z</code></p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="解压并运行"><a href="#解压并运行" class="headerlink" title="解压并运行"></a>解压并运行</h3><p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g72lt0by9cj311x09274m.jpg" alt="1568708708517"> </p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>打开软件后，来到扩展管理这栏，里面有三个扩展：</p>
<ul>
<li>百度云下载</li>
<li>全网嗅探</li>
<li>B站视频下载</li>
</ul>
<p>下载百度云下载扩展并且打开开关</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g72ltmpfl9j30s20hj0vn.jpg" alt="1568709183283"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>打开百度云网盘网页，点击直链下载。就会切换到 <code>proxyee-down</code> 进行下载啦~</p>
<p><img src="http://ww1.sinaimg.cn/large/005O54Flgy1g72lsirbijj31bw0btt9c.jpg" alt="1568709290259"></p>
<p>百度云100倍下载之旅现在开始啦，嘎嘎嘎嘎 ~</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/archives/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<a id="more"></a>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
